[["index.html", "Team PSD Manual Chapter 1 Team PSD Manual 1.1 Table of Contents 1.2 Partners - Team PSD 1.3 User Roles - Team PSD (manual/workflow) 1.4 Glossary 1.5 Acronym 1.6 Link 1.7 Metadata 1.8 Contribute to Manual 1.9 Create a Feature branch from the GH-Pages Branch. 1.10 Create a new markdown file into the branch. 1.11 Edit/format your markdown file. 1.12 Add markdown file name in the “_bookdown.yml” file. 1.13 Check your file against the GH Actions by making a pull request to the GH-Pages master branch. 1.14 Publish your Chapter to master GH-pages branch.", " Team PSD Manual Team PSD 2024-08-01 Chapter 1 Team PSD Manual Welcome to Team PSD’s manual for resources and guides! Click within chapters and subsections or use the built-in search feature to search throughout the manual for key terms. 1.1 Table of Contents The Team PSD Manual’s table of contents is clickable and separates into 3 header styles: Main Chapter Subchapter Subheader (nested within Subchapter) 1.1.1 Main Chapter Example: This chapter is chapter 1, Team PSD Manual. 1.1.2 Subchapter Example: This subchapter is 1.1, Table of Contents. 1.1.3 Subheader Example: This subchapter has subheaders are 1.1.1, 1.1.2, 1.1.3. Note: Subheaders are nested within subchapters and not directly seen unless the subchapter is first clicked on. Unclicked subchapter (this is by default): unclicked subchapter image Clicked subchapter that reveals subheaders: clicked subchapter image 1.2 Partners - Team PSD 1.3 User Roles - Team PSD (manual/workflow) 1.4 Glossary @ Mentions: to notify a person on GitHub by using @ before their username. Users in an organization on GitHub can also be a part of a team that can be mentioned. App: Allows you to automate and improve the GitHub workflow. Team PSD can use apps to automate simple tasks and enforce standards. Application Programming Interface (API): We use APIs as a call to send data from our GitHub repository to GitHub Apps and Actions. Assignee: The member that is assigned to an issue or feature card. Branches: A branch is a parallel version of a GitHub repository. It is contained within the repository, but does not affect the primary or master branch allowing you to work freely without disrupting the “live” version. When you’ve made the changes you want to make, you can merge your branch back into the master branch to publish your changes. Bug: An existing feature that has been developed and is not working correctly and should be documented in an issue card on GitHub to be resolved. Card: A movable square within an associated and contain documentation for Issue tasks, Bugs, Features, or Pull Requests. You may see issue cards on GitHub Kanban Trackers and on the ZenHub Workspace Board. Code of conduct: A document that defines standards for how to engage in a community on GitHub. Comment: Add comments within GitHub issue cards to keep discussion going all within context. Compare branch: The branch you use to create a pull request in GitHub. This branch is compared to the base branch you choose for the pull request, and the changes are identified. When the pull request is merged, the base branch is updated with the changes from the compare branch. Also known as the “head branch” of the pull request. Concurrent Screencast Video: Screencasted videos allows for asynchronous feedback to be provided. These videos consist of users going through the MVP without audio to concurrently focus on the task of seeing/trying out the MVP and whether or not it addresses their user-centered hypotheses and pain points. Videos should be uploaded on the LZPhD YouTube channel. Continuous Deployment (CD): Automatic releases to a test or production environment if all the tests from the Continuous Integration (See Continuous Integration) process pass. Continuous Integration (CI): Practice of integrating changes “continuously”, coupled with automated testing to allow for a function and always up-to-date repository base. Continuous Learning: The Continuous Learning Culture competency describes a set of values and practices that encourage individuals—and the enterprise as a whole—to continually increase knowledge, competence, performance, and innovation. Community of Practice (COP): Communities of Practice (CoPs) are organized groups of people who have a common interest in a specific technical or business domain. They collaborate regularly to share information, improve their skills, and actively work on advancing the general knowledge of the domain. Deliverable: A product of a task or group of tasks. Design Thinking Process: Design Thinking is a customer-centric development process that creates desirable products that are profitable and sustainable over their lifecycle. The Process consists of Emphasizing, Defining, Ideating, Prototyping, and Testing (see Team PSD 2.0 Monthly Process). Dependency (Blocking/blockers): Use a blocking/blocker to add a dependency on your GitHub issue card to alert others that a task cannot be done without another task or vice versa. Documentation: Materials or descriptions that provide information about a topic. The team uses documentation to ensure that our work is transparent, reproducible, and understandable for both team members and external partners. Epic: Epics are ~1 month’s worth of sprints that go by the week. Each month is a new epic (e.g In August, our Epic is aug_epic). Estimate: Points following the Fibonacci sequence to describe the level of effort, not hours, required to complete an issue or feature. We can think of these as t-shirt sizes: Expedite: To move the priority of a bug or feature in GitHub to the top of a queue. Expediting is poison to a production system and should be used only in exigent circumstances. Feature: A characteristic, attribute or topic that requires work breakdown, research, design, development and testing. Features can be tagged as “fast_track” in order to expedite its design and development. The features documentation of requirements will be in a GitHub Feature card and placed in the appropriate feature_tracker column. Fork: A fork is a personal copy of another user’s GitHub repository that lives on your account. Forks allow you to freely make changes to a project without affecting the original upstream repository. You can also open a pull request in the upstream repository and keep your fork synced with the latest changes since both repositories are still connected. Git: Git is an open source program for tracking changes in text files. It was written by the author of the Linux operating system, and is the core technology that GitHub, the social and user interface, is built on top of. GitHub: Team PSD’s main platform to track work from each Team PSD Workflow (Research, Operations, and Modeling to Learn) based on GitHub repositories. GitHub Actions: GitHub Actions help automate repository workflows and tasks on GitHub. You can write individual tasks, called actions, and combine them to create a custom workflow. Workflows are custom automated processes that you can set up in your repository to build, test, package, release, or deploy any project on GitHub. Issue: Issues are an important tasks or problems to be worked on and may be discussed with others to resolve and close in a GitHub Issue card. Labels: A tag in GitHub that is affixed by an originator or workgroup as a means to identify the task holders for a specific issue. Workgroup leads can filter by labels in the tracker to sort for their specific workgroup or other workgroups’ Kanban cards in the search bar found in the upper right-hand corner of each tracker (below). To use the filter function, use the code “label:labelname” i.e. “label:facilitate” or “label:sim_ui”. (You can use this function with other sort options as well i.e. author:lzim, etc.). In most cases, an issue should only have 1 label at any given time. LucidCharts: Platform that enables the creation of charts and flows. The team uses LucidCharts for pictorial documentation. Markdown (language and file format): Markdown is an incredibly simple semantic file format, not too dissimilar from .doc, .rtf and .txt. Markdown makes it easy for even those without a web-publishing background to write prose (including with links, lists, bullets, etc.) and have it displayed like a website. GitHub supports Markdown and uses a particular form of Markdown called GitHub Flavored Markdown. Master Card: GitHub Master Cards typically do not have an Assignee, Milestone, Estimate, (with the exception of some Manuscript cards for the PI) as their purpose is to document and track all related issue task cards and/or requirements. These cards usually live in their respective Kanban Tracker and/or ZenHub pipeline. Master Document Card: The Master Document Card is a tracking card on GitHub that tracks all of an Issue task’s requirements and multiple Issue task cards related to 1 big Issue that had to be broken down into small tasks. Master Document Cards flows through the document_tracker Kanban and open_documents ZenHub pipeline. Master Feature Card: The Master Feature Card is a tracking card on GitHub that tracks a customer requirement through design to testing. It defines a customer’s requirement, design features that support the requirement and test criteria that demonstrate the design criteria meets the customer requirement. Master Feature Cards flows through the feature_tracker Kanban and open_features ZenHub pipeline. Master Manuscript Card: The Master Manuscript Card is a tracking card on GitHub that tracks all of an Manuscript related Issue task’s requirements and multiple Issue task cards related to 1 big Manuscript Issue that had to be broken down into small tasks. Master Manuscript Cards flows through the manuscript_tracker Kanban and open_manuscripts ZenHub pipeline. Merge: Merging takes the changes from one branch (in the same GitHub repository or from a fork), and applies them into another on GitHub. This often happens as a “pull request” (which can be thought of as a request to merge), or via the command line. A merge can be done through a pull request via the GitHub.com web interface if there are no conflicting changes, or can always be done via the command line. Merge conflict: A difference that occurs between merged branches on GitHub. Merge conflicts happen when people make different changes to the same line of the same file, or when one person edits a file and another person deletes the same file. The merge conflict must be resolved before you can merge the branches. Milestone: Milestones are the monthly workgroup sprints, in which each workgroup tries to accomplish their monthly milestone goals for the monthly epic. Minimum Viable Product (MVP): A new/revised product that attempts to address a user or user groups pain points and needs (See User-Centered Hypotheses). The MVP should follow the 80/20 Pareto Principle (created with the least amount/20% of effort but solves majority/80% of pain points/needs). Persona: A description that is used to represent a user or a user groups’ needs and pain points (see User-Centered Hypotheses) with specific skills, goals, attittudes, and the background of the user to account for while creating and prototyping an MVP. Principles: Rules or beliefs that may be in service of multiple key Values. Project (Kanban Tracker Board): A board that contains issue cards and is used to communicate the status and priority of bugs, features, documentation, &amp; manuscripts as they move through the production process. There are four Kanban to manage production in the Team PSD are: bug_tracker, feature_tracker, document_tracker, and manuscript_tracker. Prototyping: Occurs during Week 2 of the Team PSD 2.0 Monthly Process, prototyping is to build or create a final product or MVP (see Minimum Viable Product) as a way to understand what it should do, how it should be interacted, and see how the product or MVP will look like before completion. The user or user groups’ pain points should be taken into account of while prototyping (see User-Centered Hypotheses). Pull request: Pull requests are proposed changes to a GitHub repository submitted by a user and accepted or rejected by a repository’s collaborators. Like issues, pull requests each have their own discussion forum. Pull request review: Comments from collaborators on a GitHub pull request that approve the changes or request further changes before the pull request is merged. Readme: A GitHub text file containing information about the files in a repository that is typically the first file a visitor to your repository will see. A README file, along with a repository license, contribution guidelines, and a code of conduct, helps you share expectations and manage contributions to your project. Refactoring: Refactoring is needed when we have to make upgrades over time and/or prepare for new, incoming features. Refactoring requires internal changes, without effecting external behavior. Release: GitHub issues that are grouped into a key team release. Repository: A repository is the most basic element of GitHub. They’re easiest to imagine as a project’s folder. A repository contains all of the project files (including documentation), and stores each file’s revision history. Repositories can have multiple collaborators and can be either public or private. Repository (Private): Private GitHub repositories are only visible to the repository owner and collaborators that the owner specified. Retrospective Verbal: A retrospective verbal is a written out set of feedback and response after the user finishes testing and looking through an MVP and thinking about whether or not the MVP addressed their user-centered hypotheses and pain points. Second Story Perspectives: A retrospective look during Week 4 of the Team PSD 2.0 Monthly Spring to discuss what happened in the Epic, the results of the Iteration, review their practices, and identify ways to improve for the next Epic. Task: A cognitive or kinetic behavior that consumes time. A task or group of tasks are necessary to create an outcome or deliverable. Team PSD 2.0 Monthly Process: The 2.0 Monthly Process for Epics/Milestones follows the design thinking process based on concepts from user experience to scale and make Team PSD’s workflow become asynchronous to better support the needs and pain points (See User-Centered Hypotheses) of a user with a product that can also be integrated by the end of the month for the team to use. The Monthly Process goes by weeks. Week 1: Gather user-centered hypotheses Week 2: Clarify user assumptions w/ Minimum Viable Product (MVP) test Week 3: Review results of user persona testing of your MVP Prototype (with concurrent video and retrospective verbal) Week 4: Review user persona artifacts and second story perspectives mindfully and empathically to discover new understandings you might have missed or still need to learn Team PSD Workflows: Team PSD has 3 workflows: Research, Operations, and Modeling to Learn. Think Aloud Protocols: These user testing protocols typically involve participants thinking aloud as they are performing a set of specified tasks. Participants are asked to say whatever comes into their mind as they complete the task. This might include what they are looking at, thinking, doing, and feeling. Team PSD does a combination of a concurrent and retrospective think aloud protocol (see Concurrent Screencast Video and Retrospective Verbal). User Experience: A person’s emotions and attitudes about using a particular product, system/workflow or service. The Team PSD 2.0 Process is based on the foundation of the user’s experience to ensure Products integrated by the end of the monthly Epic address the person’s emotions, attitudes, pain points, and needs. User Testing: Occurs during Week 3 of the Team PSD 2.0 Process, user testing is the process through which the MVP is tested by the targeted users who perform specific and realistic tasks using the MVP. User-Centered Hypotheses: Gathered in Week 1 of the Team PSD 2.0 Process, these are the pain point and needs of a user that is struggling in either a task or parts of the workflow within Team PSD’s Operations, Research, and/or Modeling to Learn pipeline. The pain points and needs should be turned into hypotheses that can be tested and reiterated throughout the Team PSD 2.0 Monthly Process cycle to address and resolve the pain points and needs of a user/user group. Values: Virtues that govern the team’s principles. Values can be in conflict with Principles, especially when it comes to applying Values in any given action. YAML Ain’t Markup Language (YAML or YML): Data serialization language that is used to set configurations for other applications to read and have information about the document/script. YAML will be used by the team to setup App configurations and in our documentation to enable transfers between other documents. GitHub Action workflow files use .YML files. ZenHub: A Google Chrome extension that allows agile project management within GitHub. ZenHub 9 clicks: Every issue card must be in a pipeline, have an assignee, labeled, added dependencies, added to a tracker (if applicable), milestone, epic, estimated with points, in an epic and/or project (if applicable), within a release (if applicable), and associated with pull requests (if necessary). ZenHub Pipelines: Pipelines are columns within the overall ZenHub Board to show where Issues belong in which pipeline, allowing for a clear and consistent flow of Issues across the Board. You can click on the light grey (i) icon within each pipeline to see the description. 1.5 Acronym AAHRPP: Association for the Accreditation of Human Research Protection Program ACCME: Accreditation Council for Continuing Medical Education ACORP: Animal Component of Research Protocol ADPAC: Automated Data Processing Application Coordinator ANCC: American Nurses Credentialing Center APA: American Psychological Association ASWB: Association of Social Work Boards ATS: Addiction Treatment Services AUD: Alcohol Use Disorder BHIP: Behavioral Health Integration Project BISL: Business Intelligence Service Line CBOC: Community Based Outpatient Clinic CC: Care Coordination CFIR: Consolidated Framework for Implementation Research CHCE: Center for Health Care Evaluation CPRS: Computerized Patient Record System CPT Code: Current Procedural Terminology CRADA: Cooperative Research and Development Agreement CSP: Cooperative Studies Program CTR3: Center for Tissue Regeneration, Rehabilitation, and Repair CWT: Comprehensive Work Therapy DEA: Drug Enforcement Agency DHHS: Department of Health &amp; Human Services EBP: Evidence-Based Practices EBPharm: Evidence-Based Pharmacotherapy EBPsy: Evidence-Based Psychotherapy EES: Employee Education Services F&amp;A Rate: Facilities &amp; Administrative Rate FAR: Federal Acquisition Regulations FTE: Full Time Equivalent GHPC: Georgia Health Policy Center GRECC: Geriatric Research, Education and Clinical Center HERC: Health Economics Resource Center HSR&amp;D: Health Services Research and Development Services IACUC: Institutional Animal Care and Use Committee INAPS: International Association of Peer Supporters IOP: Intensive Outpatient Program IPA: Intergovernmental Personnel Act IRB: Institutional Review Board JPA: Joint Personnel Agreement LD: Livermore Division MAT: Medication Assisted Therapy MHICM: Mental Health Intensive Case Management MHTC: Mental Health Treatment Coordinators MIRECC: Mental Illness Research, Education, and Clinical Center MM: Medication Management MPD: Menlo Park Division NAVREF: National Association of Veteran’s Research and Education Foundations NBCC: National Board for Certified Counselors NCPTSD-DT: National Center for Posttraumatic Stress Disorder, Dissemination &amp; Training NIH: National Institutes of Health OGC: Office of General Counsel OMB: Office of Management &amp; Budget OMHO: Office of Mental Health Operations (now OMHSP) OMHSP: Office of Mental Health &amp; Suicide Prevention (previously OMHO) OPM: Office of Personnel Management ORO: Office of Research Oversight OUD: Opioid Use Disorder PAD: Palo Alto Division PAIRE: Palo Alto Institute for Research and Education, Inc. PAVIR: Palo Alto Veterans Institute for Research PCP: Primary Care PHysician PCT: PTSD Clinical Team PE: Prolonged Exposure PERC: Program Evaluation and Resource Center PHI: Protected Health Information PI: Prinicipal Investigator PSA: Personal Services Agreement PSD: Participatory System Dynamics QI: Quality Improvement QIIC: Quality Improvement Implementation Consultant R&amp;DC: Research and Development Committee RDIS: Research and Development Information System rJPA: Reverse Joint Personnel Agreement SAIL: Strategic Analytics for Improvement and Learning Sankey: A type of flow diagram where the width of the arrows are proportional to the flow quantity “Say File”: GitHub file for the facilitators to read from “See File”: GitHub file for learners to look at at SME: Subject Matter Expert SMI: Serious Mental Illness SRC: Scientific Review Committee SRS: Subcommittee on Research Safety SU: Stanford University SUD: Substance Use Disorder UI: User Interface VA: Veterans Affairs VAPAHCS: Veterans Affairs Palo Alto Health Care System VAPOR: Veterans Advisory Partnership for Operations and Research VERC: Veterans Engineering Resource Center VHA: Veterans Health Administration VISN: Veterans Integrated Service Network VISTA: Veterans Health Information Systems and Technology Architecture WCC: Women’s Counseling Center WRIISC: War Related Illness &amp; Injury Study Center WRVU: Work Relative Value Unit X Waiver: Needed to prescribe buprenorphine; must complete training and still limits # of patients per physician that can receive bup test commit 1.6 Link 1.7 Metadata #how_to_video #user_story #data_feeds #mtl_learner #mtl_facilitator #teampsd_howto #mtl_admin #data_oit #data_omhsp #data_teampsd 1.8 Contribute to Manual 1.9 Create a Feature branch from the GH-Pages Branch. Start by creating a feature branch with the beginning of the branch named “feature-gh-pages”. Example: feature-gh-pages_chapter_11 1.10 Create a new markdown file into the branch. image Naming convention: chapter_(chapter # here)_(title of your chapter).md Example: chapter_4_teampsd_monthly_process.md Note: If your chapter is very long, break down your markdown file into sectioned markdown files to easily find the section of the chapter you want to edit. Example: chapter_4.3_teampsd_monthly_process_week_3.md 1.11 Edit/format your markdown file. Heading Rules Header 1: Title of Chapter Header 2: Main Sections of the Chapter Header 3 (hidden unless Header 2 is clicked on in the manual): Sub-level for the main section. Header 4 (hidden within the content of Header 3): Use to further indicate additional sections/sub-headings within a chapter. Example: - Header 1: Team PSD 2.0 Monthly Process - Header 2: Week 3: Review User Results of MVP - Header 3: 4.3.1 Create Screencast Video - Header 4: 4.3.1.1 Instructions 1.12 Add markdown file name in the “_bookdown.yml” file. The “bookdown.yml” prints out the manual in the order of the the markdown files listed in line 6 rmd_files:. Add your markdown file name in the order of which the file should appear in the manual in line 6 within the brackets. Make sure to include quotations around the file name and a comma, if needed. image This is a great way to check the formatting and output of your markdown file in the actual Manual before you hand off the review for QA Test. 1.13 Check your file against the GH Actions by making a pull request to the GH-Pages master branch. Assign QA Test reviewers and check for a red X by each GH Action and read the output of where errors occurred. Click on “Details” in the ActionChecker Action to be navigated to the Spell, Link, and Linter checkers. image Once edits based on failed checks and feedback from reviewers have been implemented, merge the Feature branch into the GH-Pages branch. 1.14 Publish your Chapter to master GH-pages branch. Merge the Feature branch into GH-pages’s master branch and double check that your chapter was published at https://mtl.how/teampsd_manual "],["2-use-and-contribute-to-this-manual.html", "Chapter 2 Use and Contribute to this Manual 2.1 TEST 2.2 Click Table of Contents 2.3 Ctrl+F Key Terms 2.4 Contribute to Manual using GitHub", " Chapter 2 Use and Contribute to this Manual 2.1 TEST 2.2 Click Table of Contents The Team PSD Manual’s table of contents is clickable and separates into 3 header styles: Main Chapter Subchapter Subheader (nested within Subchapter) 2.2.1 Main Chapter Example: This chapter is chapter 2, Use this Manual. 2.2.2 Subchapter Example: This subchapter is 2.1, Click on Table of Contents. 2.2.3 Subheader Example: This chapter’s subheaders are 2.1.1, 2.1.2, 2.1.3 which focuses on the 3 different header styles. Note: Subheaders are nested within subchapters and not directly seen unless the subchapter is first clicked on. Unclicked subchapter (this is by default): unclicked subchapter image Clicked subchapter that reveals subheaders: clicked subchapter image 2.3 Ctrl+F Key Terms To search for key terms throughout the entire manual, use the built-in Ctrl+F function in the manual. Use your laptop’s keyboard to Ctrl+F or Cmd+F to search within chapters if you already know which chapter a key term you are looking for is in, but unsure where within that chapter, To use the built-in Ctrl-F function: Click on the magnifying glass icon in the header at the top of the manual. magnifying glass icon image Type in the search box the key term(s) you are searching throughout the entire manual. search box image The chapters where the key term was found in will appear in the Table of Contents. search instances image To look through all of the instances, click the Enter button on your keyboard: To look within a chapter from the Table of Contents, click on the chapter you want to search in and click Enter to look through the instances in that chapter: Clicked on the Glossary chapter for example glossary chapter example image 2.4 Contribute to Manual using GitHub 2.4.1 1. Create a Feature branch from the GH-Pages Branch. Start by creating a feature branch with the beginning of the branch named “feature-gh-pages”. Example: feature-gh-pages_chapter_11 2.4.2 2. Create a new markdown file into the branch. Naming convention: chapter_(chapter # here)_(title of your chapter).md Example: chapter_4_teampsd_monthly_process.md Note: If your chapter is very long, break down your markdown file into sectioned markdown files to easily find the section of the chapter you want to edit. Example: chapter_4.3_teampsd_monthly_process_week_3.md 2.4.3 3. Edit/format your markdown file. Heading Rules Header 1: Title of Chapter Header 2: Main Sections of the Chapter Header 3 (hidden unless Header 2 is clicked on in the manual): Sub-level for the main section. Header 4 (hidden within the content of Header 3): Use to further indicate additional sections/sub-headings within a chapter. Example: - Header 1: Team PSD 2.0 Monthly Process - Header 2: Week 3: Review User Results of MVP - Header 3: 4.3.1 Create Screencast Video - Header 4: 4.3.1.1 Instructions 2.4.4 4. Add markdown file name in the “_bookdown.yml” file. The “bookdown.yml” prints out the manual in the order of the the markdown files listed in line 6 rmd_files:. Add your markdown file name in the order of which the file should appear in the manual in line 6 within the brackets. Make sure to include quotations around the file name and a comma, if needed. image This is a great way to check the formatting and output of your markdown file in the actual Manual before you hand off the review for QA Test. 2.4.5 5. Check your file against the GH Actions by making a pull request to the GH-Pages master branch. 2.4.5.1 Editors There are several editor actions that will screen your documents for proper format, compliance with editorial rules and spelling. The Markdown Editor tests your markdown file for compliance with markdown editorial rules. For example, it checks for additional spaces after each line, proper sequence of headers, bulleted lists, and other basic editorial screenings. Below are steps to follow to use this test. The Link Checker will test all the links in your document to make sure they work. Recommend running this action from inside the VA Domain, as some domain links will return an error if you test outside the domain. The APA Editor tests your markdown file for compliance with APA rules for the use of prepositions in titles, special characters, bulleted questions and abbreviations. Procedure: Assign QA Test reviewers and check for a red X by each GH Action and read the output of where errors occurred. Click on “Details” in the ActionChecker Action to be navigated to the Spell Checker, Link Checker, Markdown Editor and APA Editors. Once edits based on failed checks and feedback from reviewers have been implemented, merge the Feature branch into the GH-Pages branch. 2.4.6 6. Publish your Chapter to master GH-pages branch. Merge the Feature branch into GH-page’s master branch and double check that your chapter was published at https://mtl.how/teampsd_manual "],["3-standard-operations.html", "Chapter 3 Standard Operations 3.1 Team PSD 3.2 Scientific Values 3.3 Guiding Principles 3.4 Policy 3.5 Project Management [flowmap needed] 3.6 Project Trackers 3.7 Shared Outlook Inboxes 3.8 Quality Assurance Cadence 3.9 Story Points", " Chapter 3 Standard Operations 3.1 Team PSD Meet the members and partners of Team Participatory Systems Dynamics at mtl.how/team. 3.2 Scientific Values Team PSD Scientific Values guide additional Participatory and Open Science principles: Participatory Research encourages us to co-create our scientific research. Therefore… We share decisions, which requires a high level of documentation. We seek greater equity among partners in how collaborate, which requires responsive pivots with new stakeholder inputs. We strive use transparent and accessible processes and platforms, and develop transparent, accessible resources. 3.3 Guiding Principles Value Streams: All Workstreams: All Workflows: All Teams Channel Link 3.3.1 Open-Source, Transparent, Reproducible We value an open-source, transparent &amp; reproducible workflow. Most of our work is public-facing with the exception of any items that include Protected Health Information (PHI) or Personally Identifiable Information (PII). All of our public materials are free to download and use. We want our insights and resources to benefit the larger community. We use R, a free open-source coding language and a specific file naming convention to ensure all of our materials are machine &amp; human readable. How: all lower case, no spaces, with dates as yyyy_mm_dd (e.g., teampsd_guiding_principles_2020_01_01). Why: this naming convention is best for both human and machine readable applications. Examples of major benefits we rely on on Team PSD: You can sort files by dates in a standard way (e.g., yyyy_mm_dd). You can include human readable file name in a URL, without it breaking the link (e.g., https://mtl.how/camhd_kfgc). All lowercase font does not break our primary statistical R coding language, which is case sensitive (e.g., A and a are different variables). Use email for any private discussions. Host any private files in password-protected locations or in folders behind the VA firewall. When in doubt, ask an HQ member or err on the side of caution. Make sure your work and accompanying documentation allows other team members or scientists in the field to reproduce and understand your work without further questions. 3.3.2 High Visibility Our work has high visibility. Keep in mind we work under the federal government of the United States for the Veterans Health Administration (VHA), the largest integrated healthcare system in the country. Everything we produce is a reflection of the VHA. We work with a wide range of nationally-distributed partners both internal and external to VA, including very important and high-level stakeholders. Double check the role and responsibility of people you are communicating with before you do. With these partners, we work in a participatory learning manner and iterate based on feedback from the field to ensure our work is responsive to ongoing changes. 3.3.3 Team Time Any time saved is team time. Ask questions early and often to prevent escalating issues down the road. Refer to existing resources (cheatsheets, checklists, etc.) as well for clarification. Double check all work before handing it off to the next team member to reduce rework. Think through dependencies across the team and partners and prioritize work based on the most recent information you have. Manage workflow asynchronously (via GitHub) and only schedule meetings when absolutely necessary. 3.3.4 Communication Use effective communication (across all types of communication including emails, GitHub, Lucid, etc.). Assume everyone you’re communicating with is smarter than you and cares more than you and is busier than you Keep it short - use an active voice. Use common words - avoid acronyms and technical jargon. Use bold or italics to emphasize main points. Use bullet statements to structure ideas. Include the full context and details necessary to make an informed decision List the “Bottom-Line-Up-Front” - what do you want? State known facts bearing on the problem - what is important for people to know? List assumptions - what gaps have you identified? Describe solution alternatives and make recommendations where possible. Make specific “asks” to individuals using the “@” function in discussion threads and indicate when you need a response. Maintain a complete record Use previous records of Teams meetings and GitHub discussions to track decisions and stay informed. Maintain conversation records in discussion threads for discussions had outside of established meetings. Follow up - an action passed is not an action complete. Stay positive Use emojis. Use appropriate humor. Use your webcam whenever possible. 3.3.4.1 Active Listening We use active listening skills to ensure understanding and accurate tracking. We work daily with team members and partners that are experts in their respective fields, and it is easy to lose track of a complex discussion. We’ve found that reflecting-back requests and decisions in your own words has been the best method to reduce miscommunication and to keep track of all of our decisions or issues accurately. If you ever need help while scribing, always “tap” someone else on the team for assistance. Ask for clarification and slow down if necessary. 3.3.4.2 Active listening is a stance Taking the stance that misunderstanding is the norm and using skills appropriate to that reality. General skills: Reflecting content for efficiency and interpersonal rapport (i.e., avoiding rework and frustration) “When in doubt, check it out” - It’s the listener’s job to help the speaker understand what they are getting or what they missed. Let the speaker know when you’re falling behind. Stop them before the conversation exceeds your understanding. Use the same precise language/vocabulary, esp. Team PSD or MTL terms with specific meanings. “Chunking” components of what someone said (e.g., listen for the “and” when someone is speaking) Listen for the main points. This is a key skill to keep up with complex ideas in the moment (You don’t want to get bogged down on point 1 and miss point 2). Reflection of feeling - listen for the feeling words and reflect them exactly. Using the exact feeling word you heard is the safest way to ensure the person feels heard. Don’t reflect “frustration” when someone is expressing “disappointment” or “stress.” You can use these for non-verbals too. If you hear a feeling, it’s best to address it in your reflection. Synthesize two person’s ideas - or just two ideas (or more) e.g. “on the one hand, I hear Anthony saying…” and “on the other hand, I hear Stacey saying…” Synthesis brings the ideas together. It is not just active listening both ideas as separate ideas. Summarize - used when it’s time to wrap up, and move on, and a lot of ideas have been said. This is not the time to bring up new points. If you do have something to add, say it first. It’s best to end with a summary of the key points of consensus and the key take aways of what to do next. After you reflect, add to what the person is saying (a key to improv is “yes, and…” - don’t reject ideas, just try to understand first and then build on the ideas). Forward momentum comes from making sure you understand the person and add your own contribution. Listening is about being present to understand; you do not have to agree with what a person is saying. Before you even get to agreement/disagreement, make sure you have a shared understanding first. KEY IDEA: Really attend to make sure you understand. Do NOT think about your response when you should be listening. 3.3.4.3 Things to look out for when listening Know thyself: You are the only one who knows whether it’s time to multi-task, focus, scribe/document as a form of listening, or whether typing would be a distraction. Repetition cycle: If the speaker you’re listening to keeps repeating something, your first move should be to assume that you’re missing something and ask what it is. Your own feelings: If you’re starting to feel frustrated, it’s a key sign that you should use active listening to get back on the same page. 3.4 Policy 3.4.1 Scope This policy applies to all Team PSD members involved with research under grants, R21DA042198, R01DA046651, IIRI01HX002521 commonly known as Modeling to Learn (MTL). This policy is subordinate to new or existing Veterans Administration (VA) policy. Any issues identified that are contrary to VA policy or federal laws should be brought to the attention of the Principal Investigator, Lindsey Zimmerman, (lindsey.zimmerman@va.gov). 3.4.2 Purpose This policy details the governing principles, definitions, responsibilities and procedures for managing cards, issues, &amp; pull requests in the Kanban production management system for the issue_tracker, feature_tracker, document_tracker, and manuscript_tracker GitHub projects for the Team PSD. Finally, the policy will describe how MTL and overarching research experimental design and reporting with be coordinated. 3.4.3 Responsibilities Principal Investigator - Provides overall direction and guidance to Workflow Leads. Coordinates research activities and prioritizes activities within the MTL program with the HQ workflow Co-facilitators - Gathers field information and provides feedback to Workflow Leads regarding the performance of a product in the teaching/learning environment. Facilitate Modeling to Learn 12 Session Program with identified clinics for the R01 and IIR grants. Co-investigators - Oversees the science and research dependencies across the project. Workflow Leads - Oversees the production and maintenance of their products in terms of quality, cost and delivery, responding to the needs of the projects as defined by co-investigators and co-facilitators. HQ Proxy - An individual who is a member that supports a specific workflow and can participate in the absence of the Workflow Lead to represent the interests of a workflow. A Proxy has the decision-making authority of the Workflow Lead they represent. The Workflow Lead must still provide detailed and concise documentation of questions and scope on bugs and features related to their workflow in the Workflow Leads meeting agenda. Checks the bug_tracker, feature_tracker, document_tracker, and manuscript_tracker (as related to the workflows) daily to identify &amp; assign interdependencies from the labels list used as a dependency check Ensures that all cards are updated in the issue_tracker, feature_tracker, document_tracker, and manuscript_tracker (as relevant to the workflow) in include a due date once they have been triaged with HQ &amp; other workflow leads. Trains respective workflows in changes to policy &amp; procedures for Kanban workflow. Estimates the time required to fulfill completion of bugs (issues) &amp; features. Attends weekly Monday 8am PST / 11am EST Workflow Leads meeting or alerts the HQ Proxy (see above) in their stead, should they not be able to attend. 3.4.4 Redundancy Success Mode Failure mode: Email and person are in an individual member’s email, where no one else can run it down. Success mode: Information is in the manual. Everyone is trained. Shared resource, where others can track and run things down (Email, Team PSD folder, manual, LucidChart, ZenHub/GitHub). Engineering - Redundancy Solves scaling problems. Platforms not people. Network effects. “Hub &amp; Spoke” failure mode. 3.4.5 Workflow/Schedule Team PSD is now on a flex schedule with 8 hours of individual flex time &amp; focus blocks for each workflow. The schedule depicts a standard Team PSD Tour of Duty from 8AM-4PM Pacific Mon-Thurs. It is designed to increase individual flex time and increase individual focus time, while decreasing “set switching” among workflows. Each user workflow meeting is depicted by a box. Time to prepare for the user workflow meeting or follow-up after the meeting is depicted by color. Depicted is 16 scheduled hours of user workflow meetings per week (40% of a 40 hour week). And, no less than 8 hours of individual focus time (either through a “4 10s” or a “5 8s” schedule. Percent of the 32 hours focused on each of these major Workflows: 31.25% Cross-Cutting (Workflow Leads, Support Workflows, HQ)= 10 hours/week 25% + Flex up to 50% for Research (Manuscripts, Co-I, Qual, Quant) = 8 hours/week 21.8% MTL/Operations (QIICs/Facilitate, Quant, Sim/Models) = 7 hours/week 20.3% Team PSD &amp; NCPTSD Division Participation (team_temp, team_time, All Hands NCPTSD Staff meeting) = ~6.5 hours/week The table below provides information about each of the five Team PSD value streams. Value Stream Description Education Activities in support of hiring, onboarding, and strategic growth, training &amp; educational media (e.g., online resources &amp; videos), mentoring and professional development. This includes intra-professional medical education, (e.g., CME/CEU), research training programs, and development of professional competencies in healthcare improvement. Portfolio Activities to plan, secure, track, audit and analyze a diverse portfolio of financial resources and ensure compliance with federal, state and local, regulations and authorities, e.g., contracting, intellectual property, personnel and information security. Research Activities in support of peer-reviewed and/or human subjects protected scientific research designed to develop generalizable knowledge, e.g., IRB modifications, DART requests, Statistical Analyses of tests of specific aims, development and submission of peer-reviewed manuscripts. Operations Activities in support of daily healthcare operations and quality improvement (e.g., meetings w/VA healthcare operations partners to improve health service delivery). Development Activities in support of technological development that does not include peer reviewed human subjects research or VA healthcare operations (e.g., development of a technology or media that does not directly support peer reviewed human subjects research and developed with minimal coordination w/VHA Operations). 3.4.6 Request Time Off 1. Submit your official request through VATAS or ADP. Submit your leave in the VATAS or ADP system. 2. Document approval with an email chain approving leave (whether VA or PAVIR). Please submit an email to me (VA employees cc Randy and Karen) about the leave you would like to take and I will approve it. 3. Prepare monthly epics with leave in mind. We do prefer to have a plan for coverage across the team, and plan our sprints accordingly. 4. Add to mtl.info and mtl.help calendars. Please add your OOO to shared calendars. 5. Use an OOO automatic email whenever you’re OOO during standard VA Tour Pacific Time (Mon-Fri 8AM-4:30PM). This helps VA partners to see that you’re out across VA/Microsoft platforms. 3.4.7 GitHub Labels Table Labels shall be assigned a color, expressed in lowercase and use an underscore in lieu of a space. Below is the list of labels and their purpose: Label Purpose document expresses a dependency for at least 1 of 5 levels (describe, detail, document, disseminate, depend) of documentation to be tracked on the document_tracker. The point person for each level of documentation will be responsible for checking the issue &amp; feature tracker for dependencies (describe: Jane &amp; Debbie; detail: Tom &amp; Lindsey; document: Stacey &amp; HQ; disseminate: Lindsey, Anthony; depend: Lindsey, Jane, &amp; Jessilyn) facilitate alert all of the facilitate workflow to an issue that may affect facilitation (Jane, Debbie, Jenn, Lindsey, Stacey) hq alert to HQ workflow (Lindsey, Stacey, Jennifer, Anthony as Quant representative) to track manuscript expresses a dependency on manuscripts to be tracked on the manuscript_tracker model alert to Tom &amp; James of a dependency on the model workflow pi alert to PI/Lindsey that an action or decision is necessary qual alert to David, Kathryn, Swap, Lindsey, Jessilyn, &amp; Stacey to of dependency on the qual workflow quant alert to Anthony &amp; Ash of dependency on the quant workflow sim_ui alert to sim_ui workflow lead of an issue or dependency that affects the sim_ui. The workflow lead will evaluate sim_ui impacts and collaborate with other workflow leads to determine an adequate resolution. urgent indicates a short amount of time is available for resolution and needs to be prioritized by workflow ees description to come vapor description to come 3.5 Project Management [flowmap needed] NOTE: Team PSD Scientific Values guide how and why we synthesize the approaches below 3.5.1 Waterfall Team PSD integrates Waterfall principles because: We are a research team that cannot deviate in quality, scope, timeline or cost from our thoroughly developed and vetted research plan. Therefore, there are several well-defined scientific requirements where change cannot occur - unless the PI and co-I senior scientists advise an operational definition or implementation detail is within the scope of the federally funded and registered, scientifically peer-reviewed, and VA ORD and Stanford IRB reviewed procedures. 3.5.2 Agile Team PSD integrates Agile principles because: Our research team’s method is a an implementation of participatory system dynamics in a national production environment. These methods historically have iterated in-person locally. Our innovation is local priorities, local data and local insights at national scale, made possible using online platforms and virtual processes. Team PSD integrates Waterfall and Agile principles because: We are using a funded a priori research design (Waterfall) to study an implementation science (Agile) problem. Producing generalizable knowledge requires implementation scientists to follow and report publicly progress completing a rigorous, replicable plan (Waterfall). However, the context is not a tightly controlled laboratory, rather we are working with operational partners to implement our innovation the dynamic context of real world healthcare operations (Agile). 3.5.3 Lean Team PSD integrates Lean principles because: Team PSD processes are assessed for continuous improvement (kaizen/muda elimination). Team PSD communication is designed to reduce rework (muda/waste). Team PSD encourages minimum viable products to find and synthesize team and partner expertise (just-in-time). Team PSD platforms are designed to increase visual production controls (kanban/signboard; andon alerts). Note: VA uses Lean as a primary approach to healthcare quality improvement. 3.5.3.1 Andon Alerts Team PSD uses Andon Principles to manage bug reports and triage the issue as soon as possible. Team PSD follows three core ideas when addressing an andon. Scope - Analyze the impact of the issue and determine who the critical users are that need to be informed. Alert - As soon as scoping is complete inform the impacted users of the issue and how to track it’s resolution. Providing work-arounds if needed. Communicate - Until the issue is resolved maintain open lines of communication and provide consistent status updates. 3.5.4 Scrum Team PSD integrates Scrum principles because: We need to be able keep work produced by our transdisciplinary research team on the same page with our cross-functional team. Therefore, we use sprints (epics/milestones)so that the team priorities can be aligned/re-aligned efficiently. We also use workflow leads (scrum masters), workflows (owners) and workflow meetings to benefit from the efficiency of divvying up/delegating, while also identifying dependencies and remove blocks. We use GitHub/ZenHub and daily huddles to assign, scope, prioritize, manage and review our capacity, requirements, estimates - this includes Project Kanbans, Issue Cards, Pipelines &amp; Reporting. 3.5.5 Team Pain Points Team PSD Pain points we are working to better address: Need tight collaboration without unnecessary overhead, so culture of participation is maintained Need rapid iterations that prototype, check early, and synthesize inputfrom key stakeholders as efficiently as possible, so we aren’t pulled in wasteful directions or adding unnecessary rework Need a standard set of principles and processes, so our production platforms are stable at scale. 3.5.6 Continuous Collaboration Continuous Collaborative Iteration Cycles (e.g., “DevOps”) Standard Operations &gt; Workflow Meetings &gt; Monthly Priorities &gt; Requirements gathering standardization for features Tools for team members to understand cross-functional “stakes” efficiently “Continuous integration” to avoid “merge conflicts” - Quotes are meant to clarify that we have this problem at a communication and conceptual level, not just a code level. We need the code level next…because… Ideally…testing, deploying and documenting would be increasingly automated. REALLY need continuous documentation and training. 3.6 Project Trackers Team PSD uses the following 4 project trackers on GitHub to track incoming bugs, develop new features, create/update documentation, and ensure the progression of submitting manuscripts, all from a glance by looking at each of their respective trackers as a dashboard to see the status, progression, and completion of open issues. 3.6.1 bug_tracker The bug_tracker is divided into 6 columns described below. The purpose of the bug_tracker is to provide triage and track the disposition of issues that require action by one or more workflows. Issues labeled as “bugs” will be tracked here. 3.6.1.1 Types of Bugs 3 kinds of “Bugs” - Bugs are rapport-builders and need to be handled in relationship w/our partners. “Bug” - something not working as intended. “Andon” - “Stop the Line” - the problem could lead to a reduction in the quality of MTL Scope - Impact by time Alert - Impacted partners Communicate - until resolved. “Problem” - Needs a development plan because the bug keeps popping up. 3.6.1.2 Bug Tracker Values: Reviewed daily morning &amp; afternoon for empathetic team practice (Empathic concern for our VA partners: patients, providers, policymakers). User empathy - We want to solve user pain points. Participatory - so being responsive to our users/partners is foundation to our team. needs_triage - This column is the main intake for all issues assigned to the issue_tracker. All issues requiring a disposition will land here. When an issue lands in this section, any team lead may review it and alert other leads as to the action required. validated_actions (ranked) - This column contains all issues that have received a “bug” disposition by a Workflow Lead(s) and has been provided sufficient details to fix the problem. This is a rank-ordered list based on due dates indicated in the title. The rank-order of this section can be changed at any time. If an issue is determined to be a “feature,” it will be placed in the feature_kanban (see feature_kanban below). under_development - Bugs that are currently under development are listed in this column. This section may not be reprioritized, and contents are addressed first-in-first-out by respective workflows. testing - Bugs that are currently being tested are listed in this column. Some issues may skip this step and go directly from under_development to done. done - This column contains completed issues. Responsible Workflow Leads shall communicate completion of the action to the originator in the issue thread. The originator shall review the action, indicate their satisfaction/dissatisfaction. Once the originator is satisfied, the originator should close the issue and it will automatically go in the closed column. closed - This column contains issues closed by the originator from the done column. Any issue can be reopened as necessary. 3.6.2 feature_tracker The feature_tracker is divided into 9 columns described below. The purpose of the feature_tracker is to report and maintain information regarding the analysis of dependencies and work-content, and track the progress of issues that require development. Issues labeled as “features” will be tracked here. work_breakdown - Validated feature requirements that have received a disposition are listed here. Issues in this column are analyzed by Workflow Leads for dependencies, effort content and milestones they may support (see Appendix 1 - issue_template). Issues will progress from this section to either the operations_to_do (ranked) or the research_to_do (ranked) sections. operations_to_do (ranked) - Features that require research, design and development of products in one or more workflows are listed here in order of priority by due date indicated in the title. Issues here may be reprioritized at any time. research_to_do (ranked) - Features that support research, evaluation and documentation efforts directly related to supporting grants or higher-headquarters reporting requirements are listed there in order of priority by due date indicated in the title. Issues here may be reprioritized at any time. under_development - Operations or research features under development are listed here. This section may not be reprioritized, and contents are addressed first-in-first-out by respective workflows. functional_testing - Features that are currently being tested for basic functionality (i.e. does it work?) are listed here. Some issues may skip this step and go directly from “under_development” to “done.” done - This column contains completed issues. Responsible Workflow Leads shall communicate completion of the action to the originator in the issue thread. The originator shall review the action, indicate their satisfaction/dissatisfaction. Once the originator is satisfied, the originator should close the issue and it will automatically go in the closed column. closed - This column contains issues closed by the originator from the done column. Any issue can be reopened as necessary. future_release – This column contains unresolved feature ideas that would be great to include in a future MTL release, but currently is not a pressing need. 3.6.3 document_tracker The document_tracker is divided into 5 columns described below. The purpose of the document_tracker is to track documentation dependencies at 5 levels for each of the 12 sessions of Modeling to Learn. There will be a card for each session of the 12 sessions in each of the 5 Kanban columns which will be closed &amp; reopened as interdependencies get identified. Each column also has a “meta” card which is used to indicate interdependencies that are relevant to all/most of the 12 sessions as well as policy &amp; workflow decisions specific to that documentation column. describe_learners – Documentation dependencies relevant to learners, including SEE guides detail_facilitators - Documentation dependencies relevant to facilitators, including SAY guides &amp; one-pagers document_team - Documentation dependencies relevant to Team PSD, including cheatsheets disseminate_scientists_va - Documentation dependencies relevant to co-investigators &amp; larger scientific audience, including progress reports, code, grants, etc. depend_products - Documentation dependencies relevant to other MTL products, including videos 3.6.4 manuscript_tracker The manuscript_tracker is divided into 10 columns described below. The purpose of the manuscript_tracker is to track progress of manuscripts through 10 major stages until ready for publication. DO NOT post any direct manuscript content to GitHub; all drafts and related materials will be posted on the relevant OSF project. There will be a card per manuscript that moves through the tracker. 01_osf_project – OSF project is created for this manuscript with all relevant materials posted, Zotero &amp; GitHub integrations approved, cheatsheets linked, and relevant people added 02_authorship – Initial authorship weights and task division are identified 03_write_analyze – Manuscript is written and materials for analysis are produced. 04_edit – Manuscript goes under rounds of editing and revision between writing team. 05_approve_letter – Team working on manuscript gives final approval and drafts letter to editor 06_submit_under_review – Manuscript is submitted to relevant journals and is undergoing review 07_revise_and_respond – Manuscript feedback is received from journals and team working on manuscript revises it accordingly 08_resubmit – Manuscript is resubmitted to relevant journals 09_accept – Manuscript is accepted for publishing by journals 10_publish_publicize – Manuscript is published! 3.6.5 research_bug_tracker The research_bug_tracker is divided into 6 columns described below, similar to the bug_tracker. The purpose of the research_bug_tracker is to track bugs related to Team PSD research. needs_triage - This column is the main intake for all issues assigned to the research_bug_tracker. All issues requiring a disposition will land here. When an issue lands in this section, any team lead may review it and alert other leads as to the action required. validated_actions (ranked) - This column contains all issues that have received a “bug” disposition by a Workflow Lead(s) and has been provided sufficient details to fix the problem. This is a rank-ordered list based on due dates indicated in the title. The rank-order of this section can be changed at any time. under_development - Bugs that are currently under development are listed in this column. This section may not be reprioritized, and contents are addressed first-in-first-out by respective workflows. testing - Bugs that are currently being tested are listed in this column. Some issues may skip this step and go directly from under_development to done. done - This column contains completed issues. Responsible Workflow Leads shall communicate completion of the action to the originator in the issue thread. The originator shall review the action, indicate their satisfaction/dissatisfaction. Once the originator is satisfied, the originator should close the issue and it will automatically go in the closed column. closed - This column contains issues closed by the originator from the done column. Any issue can be reopened as necessary. 3.6.6 research_feature_tracker The research_feature_tracker is divided into 6 columns described below. The purpose of the research_feature_tracker is to track features that support research, evaluation and documentation efforts directly related to supporting grants or higher-headquarters reporting requirements. work_breakdown - Validated feature requirements that have received a disposition are listed here. Issues in this column are analyzed by Workflow Leads for dependencies, effort content and milestones they may support (see Appendix 1 - issue_template). to_do (ranked) - Features that support research, evaluation and documentation efforts directly related to supporting grants or higher-headquarters reporting requirements are listed there in order of priority by due date indicated in the title. Issues here may be reprioritized at any time. under_development - features under development are listed here. This section may not be reprioritized, and contents are addressed first-in-first-out by respective workflows. functional_testing - Features that are currently being tested for basic functionality (i.e. does it work?) are listed here. Some issues may skip this step and go directly from “under_development” to “done.” done - This column contains completed issues. Responsible Workflow Leads shall communicate completion of the action to the originator in the issue thread. The originator shall review the action, indicate their satisfaction/dissatisfaction. Once the originator is satisfied, the originator should close the issue and it will automatically go in the closed column. closed - This column contains issues closed by the originator from the done column. Any issue can be reopened as necessary. 3.7 Shared Outlook Inboxes 3.7.1 MTL Help mtl.help@va.gov email and calendar is used for any Team PSD operations workflows, including communication with the clinic teams using the Modeling to Learn quality improvement program. 3.7.2 MTL Info mtl.info@va.gov email and calendar is used for any Team PSD research workflows. 3.7.3 How to Get Access If you are unable to currently access either of the two inboxes: Create an IT ticket at yourit.va.gov requesting access to the respective inbox. Email your ticket number and request to Frank Behrens (search in VA GAL), who will pick up the ticket from the queue and complete it. (***Note: this cannot typically be completed by your local IT, and must be assigned to Frank). 3.8 Quality Assurance Cadence Value Streams: Education, Portfolio, Research, Operations, Development Workstream: Workflows: All Video Teams Channel Link 3.8.1 DEV Cadence QA Dev is responsible for completing user-hypothesis testing, delineating MVPs, verifying user stories, thinking through the requirements and impact, and deciding (or providing recommendations) on if/how we should take the first step. 3.8.2 TEST/QA Cadence Test is responsible for seamless integration by making sure the resource and all of its potential impacts are thought through and updated in a manner consistent to existing workflows, language, facilitation principles, etc. The test person should be identified by role and expertise in workflow. 3.8.3 PROD QA Prod is responsible for the final check and polish before official release and branding to all users. 3.8.4 The QA Process The Dev person will manage and create a series of three cards. At each step, the QA assignee will sign off on the GH issue card before handing it off to the next step. - Dev: Same as original issue card that that Dev person will update with understanding of key requirements, wireframes, etc. Includes checklist from master document card of all the existing features + newest feature/bug fix that the Dev person will test. - Test: Dev will include checklists from master document card of all existing + new features/fixes that need to be tested, as well as any testing scripts as needed. Test will document all dependency checks thought through and updated to ensure seamless integration. - Prod: Dev will include any testing scripts for new feature/fix. Test will include brief overview of checks &amp; updates completed to ensure seamless integration. 3.9 Story Points Team PSD uses the modified Fibonacci sequence (1, 2, 3, 5, 8, 13, 21, etc.) for exponential scaling to account for complexity (interdependence), effort, and repetition. They are a relative measure rather than an absolute one, which allows teams to compare the effort required for different tasks without getting stuck in specifics like units of time. Below is a standard scale for story points related to each value stream. Education Story Points Description 1 Complete a small task related to mentorship/education. 2 Review work for mentees or learners; facilitate a meeting. 3 Write curricula, plans, syllabi, and/or research/organize materials. 5 Coordinate with programs to review or select proposals/candidates. 8 Participate in a major training event; lead a workshop. 13 Complete a Team PSD train cadence (wk1, wk2, wk3, wk4). 21 Launch a large training program. Portfolio Story Points Description 1 Email a portfolio partner. 2 Update an official document, record, or platform (includes #adjudicate_memo). 3 Coordinate regular communications &amp; audit with portfolio partners. 5 Produce a report for key stakeholders. 8 Plan or develop a new budget for a grant or contract. 13 Monitor, analyze and coordinate salaries, contracts and purchasing (wk1, wk2, wk3, wk4). 21 Finalize a contract. Research Story Points Description 1 Complete a small task that moves research forward. 2 Review work for integration/QA. 3 Write analyses, visualization (table/figure), etc. 5 Coordinate co-Is in the incorporation of methods to test specific aims; submit a conference abstract. 8 Complete a large set of interrelated analyses; participate in Grant Review panel. 13 Sync the draft, edit, revise, and publish manuscript cadences (wk1, wk2, wk3, wk4). 21 Submit a monthly epic grant pre-award deliverables. Operations Story Points Description 1 Complete a small task that moves healthcare operations forward. 2 Coordinate work with operations workflow users. 3 Advance a major milestone/dependency impacting progress across users. 5 Coordinate several interrelated workflows to ensure a new feature is developed. 8 Complete a large set of tasks testing and documenting a PeopleOps workflow. 13 Complete a Team PSD operations cadence (wk1, wk2, wk3, wk4). 21 Launch a release: e.g., MTL 3.0, MTL for all. Development Story Points Description 1 Check a specific functional requirement. 2 Test a specific functional requirement. 3 Document the new functional requirement across users. 5 Train multiple users in use of the new functional requirement. 8 Address all related dependencies related to the new functional in manuscripts &amp; videos. 13 Complete a Team PSD development cadence (wk1, wk2, wk3, wk4). 21 Launch a release. "],["4-shared-workstreams.html", "Chapter 4 Shared Workstreams 4.1 Team PSD Workflows 4.2 Workflow and Other Responsibilities by Role 4.3 Manage teampsd_vha Workflows via Teams and Outlook 4.4 Edit a Guide via Pull Request and Plan DEV/TEST/PROD Quality Assurance Sync 4.5 Improve the Team PSD Manual 4.6 Manage Outlook Shared Calendars &amp; Meeting Series 4.7 Improve the Modeling to Learn Repo via a Pull Request and Quality Assurance 4.8 Scope Workflow Dependencies Using User Stores and GitHub/Zenhub 4.9 Coordinate Train Workflow 4.10 Onboard New Team Member to VA 4.11 Onboard a Team Member through PAVIR 4.12 Create or Edit GitHub Issue Template 4.13 Export Lists of Identifiable MTL Team Data for Research Analysis 4.14 Configure mtl.help and mtl.info Email Settings 4.15 Team PSD Onboarding to Cadence Cycles (the why/how of who does what, when) 4.16 Develop Personal and Professional Goals to Make Meaningful Team PSD Progress 4.17 Roadmap of User Stories - User Story Mapping 4.18 Update Team PSD Website 4.19 Offboarding a Team PSD Member", " Chapter 4 Shared Workstreams Value Streams: Research, Development, Operations Workstreams: All Workflow: All Teams Channel Link 4.1 Team PSD Workflows Team PSD has the following identified workflows. Descriptions of each are given below: co-i_workflow: Supports the research value stream. Coordinated by Research &amp; Development (R&amp;D). consult_workflow: VACO OMHSP Facilitators of the NIH &amp; VA cluster randomized trials. Supports the research and operations value streams. Coordinated by PeopleOps. grant_workflow: Team PSD workflow for grant pre-award activities. hq_workflow: Shared activities across research, development, and operations value streams. Coordinated by R&amp;D, PeopleOps, and DataOps. ilead_workflow: Supports the operations and development value streams - MTL Live, MTL Video, &amp; MTL Facilitate with VA Institute for Learning, Education, and Development (ILEAD). Coordinated by PeopleOps. mixed_methods_workflow: Integration of QUAL + QUAN mixed methods research. Co-coordinated by R&amp;D and DataOps. msd365_workflow: Supports the operations and development value streams. Coordinated by DataOps. quant_workflow: Supports the research and operations value streams. Co-coordinated by R&amp;D and DataOps. roadmap_workflow: Cross-cutting channel for Team PSD SAFe Roadmap events planned to occur in February, June, and October each year, to plan the subsequent 3 months (12 week “roadmap”). sim_ui_workflow: This workflow provides design, maintenance, and operational support of the MTL Simulation User Interface (Sim UI) in support of development and operations. Coordinated by DataOps. support_workflow: This coordinated workflow of both quant_workflow and sim_ui_workflow is in support of development and operations value streams. Coordinated by DataOps. systems_sme_workflow: This is the workflow for modeling consultative field support of the QIIC team. training_workflow: Shared activities across research, development, and operations value streams. Coordinated by R&amp;D, PeopleOps, and DataOps. vapor_workflow: The Veterans Affairs Partnership for Operations Research (VAPOR) is a group of Peer Support Specialists that ensure Veterans’ voices and experiences are represented in MTL and at the stakeholder table. 4.2 Workflow and Other Responsibilities by Role Shared across R&amp;D, PeopleOps, and DataOps: all_teampsd: Shared activities across all value streams coordinated by R&amp;D, PeopleOps, and DataOps. training_workflow hq_workflow Co-coordinated by R&amp;D and DataOps: mixed_methods_workflow quant_workflow Research &amp; Development is primary: co-i_workflow post_doc_mentorship: Supports the research and operations value streams. Coordinated by R&amp;D. post_bacc_mentorship: Supports the research and operations value streams. Coordinated by R&amp;D. DataOps is primary: support_workflow sim_ui_workflow msd365_workflow PeopleOps is primary: consult_workflow mtl_hawaii_samsha: Internal Team PSD meetings to discuss Data to Wisdom Grant with Hawaii Dept of Health. Coordinated by PeopleOps. ilead_workflow vapor_workflow 4.3 Manage teampsd_vha Workflows via Teams and Outlook Request Access to teampsd_vha (PI approves). On Teams click on workflow channel […] select “Manage Channel.” Navigate to mtl.help OR mtl.info shared Outlook calendars. Send updates via Outlook standing meeting series. 4.4 Edit a Guide via Pull Request and Plan DEV/TEST/PROD Quality Assurance Sync Value Stream: Operations Workstream: PeopleOps Workflow: facilitate_workflow Video: this video reviews how to update mtl.how via a GitHub pull request. Dr. Zimmerman and Mushiana review and post the updated MTL 3.0 Facilitator Fidelity guides for the partner phase to the MTL Blue s01-s04 facilitator folders. Teams Channel Link - A cross-reference to MTL 2.4, Improve the MTL repo via a pull request and QA. *Cross-reference: MTL 2.4 Review QA dependencies via User Stories on Lucidchart. Scope out QA assignees/reviewers, labels, and story points on Zenhub/GitHub. Review Team PSD Manual for use of QA branch on GitHub. Create a feature branch via a pull request from the QA branch. Open feature branch from QA. Make edits in markdown on GitHub. Conduct QA on qa_branch using GitHub Actions. Merge into QA. Create a pull request from QA to Master and assign a PROD QA reviewer. 4.5 Improve the Team PSD Manual This section explains how to use GitHub to update a section in the Team PSD manual. It will also detail how to request a review of your changes and incorporate into the document-of-record. This section explains how to: Create a “feature branch.” Make and save edits to a Markdown file. Request a merge of the feature branch with the gh-pages branch (document-of-record). How to update the bookdown.yml file to compile the Team PSD Manual in the proper chapter order. 4.5.1 1. Create a feature branch from the GH-Pages Branch. Start by creating a feature branch with the beginning of the branch named “feature-gh-pages”. The “feature-gh-pages” must be written precisely - GitHub is triggering several automated functions using that naming. Branch naming convention: New chapter - If new chapter title is “My New Chapter” then name the branch “feature-gh-pages_my_new_chapter.” Edit an existing chapter - If existing chapter title is “Using Markdown” then name the branch “feature-gh-pages_using_markdown_edit.” If the chapter is being worked on by multiple contributors, or if the chapter is long, break down into multiple files that can be reconciled when compiling the publication. See the Compiling a Publication section below for more details. 4.5.2 2. Create a new markdown file in the branch. If contributing to an existing markdown file, skip to step 3 below. Create and name a new markdown file 4.5.3 3. Find and edit a markdown file. Find the markdown file and open for editing. Chapter Heading Structure. The software that compiles the markdown files into a published manual, takes information from the heading markers (#, ##, ###) to determine if something is a chapter or a subsection. For example: “# Standard Operation” compiles as “Chapter 3 - Standard Operations” “## Team PSD” compiles as “Chapter 3.1 - Team PSD” “###”Open-source, Transparent, Reproducible” compiles as “Chapter 3.3.1 - Open-source, Transparent, Reproducible” Add content. There are many features in markdown that support various formats and text emphasis. See markdown guide cheatsheet for more information. Add a link. There are two components to a link, the description and the uniform resource locator (URL). It goes like this, description in in brackets [uniform resource locator] followed immediately by the URL in parenthesis (https://en.wikipedia.org/wiki/URL). So all together uniform resource locator. The description in brackets is a Section 508 Accessibility requirement, so visually impaired people can use a browser reader to interpret what is contained in the link. The link can be placed anywhere in the document. The term in the brackets will be the only visible element in the rendered document. Add a graphic. Adding graphics are very similar to links because they both rely on a call to a URL. Create and upload a graphic the the gh-pages_images folder. Team PSD uses the .png file format for still graphics, and .gif for screen-casts. When naming the image, describe what is contained in all lower case, separated by an underscore (ex., upload_image.png). To render a graphic in bookdown, an html tag (img src = ) is needed before the link. See the graphic below to learn how to format a graphic link. 4.5.4 4. Update the “_bookdown.yml” file to reflect proper chapter order. .yml. The “_bookdown.yml” prints out the manual in the order of the the markdown files listed in line 6. As explained earlier, the headers of the markdown files listed tells the _bookdown.yml file whether the markdown is a chapter or a subsection. The order of the files in the _bookdown.yml file will be automatically numbered sequentially by the yaml program. Add a markdown file - with chapter heading. List the markdown filename in the desired chapter order of which, the file should appear in the manual. Make sure to include quotations around the file name and a comma. Note the last chapter does not need a comma. Add a markdown file - with subsection heading. Sometimes a team must break the work out into sections and it is easier if everyone has their own file. the _bookdown.yml file supports compiling subsections from files separate from the main chapter heading file. This is a great way to check the formatting and output of your markdown file in the actual Manual before you hand off the review for QA Test. 4.5.5 5. Make a pull request to the gh-pages branch. Check and resolve for errors returned by the markdown linter, spell checker and link checker. Assign QA Test reviewers. Once the reviewer has approved, then go to step 6 below. 4.5.6 6. Publish your Chapter to master GH-pages branch. Merge the Feature branch into gh-pages branch. Check the actions and ensure the bookdown rendering did not encounter any problems. Resolve any bookdown problems. See the new work! Go to Team PSD Manual 4.6 Manage Outlook Shared Calendars &amp; Meeting Series Request access to shared calendars by emailing in Team PSD manual. Determine whether the meeting is Research or Operations. Navigate to mtl.help (operations) OR mtl.info (research) shared calendars &amp; inboxes in Outlook. mtl.help@va.gov Outlook meeting series colors (green = co-plan, purple = prep, blue = MTL Blue, red = MTL Red). 4.7 Improve the Modeling to Learn Repo via a Pull Request and Quality Assurance Value Streams: Research, Development, Operations Workstreams: All Workflows: All Video 1 Video 2 - an addendum to previous recording Video 3 - validating changes Teams Channel Link *Cross-reference: MTL 2.4 Note: Team PSD 3.0 Manual Chapter 4.2 is covered for facilitators in the MTL 3.0 Manual Chapter 2.4. Review Team PSD Manual for editing gh-pages branch. Navigate to lzim/mtl/gh-pages and make a “feature-gh_pages_*” branch. Navigate to the new branch. Make desired edits. Open a pull request and fill out Pipeline, Reviewer, Assignee, Story Points, and any other appropriate labels. Make a note to the reviewer. Review any findings from the spell checker, markdown linter, or link checker and resolve. After review, merge request into the gh-pages main branch. Review bookdown action and check rendered MTL 3.0 manual. 4.8 Scope Workflow Dependencies Using User Stores and GitHub/Zenhub Value Streams: All Workstreams: All Workflows: All Video 1 Video 2 and meeting notes Video 3 Teams Channel Link Cake wrecks - Learning idea that sensitizes us to the need to tell stories to understand each other better. Roadmap of User Stories Program Increment (PI) SAFe 5.1: PI Objectives - Scaled Agile Framework. Dependencies - Synced, Stepped, Parallel, Serial development with handoffs. Vertical view (same weekly sprint) to have a valid horizontal (over time). Works in Progress (WIP Limit). Reviewed our ZenHub Reports regarding our Key Performance Indicators (KPIs) Flow-based KPIs and user story &amp; story point WIPs 4.9 Coordinate Train Workflow 4.10 Onboard New Team Member to VA Complete all VA New Hire Paperwork in USA Staffing (e.g., New Hire Questionnaire, OF 306, etc.). Complete Fingerprinting &amp; TB Test at your assigned VA HR Office (Remote - closest VA to you, Local - VA Palo Alto HR Office on Middlefield Way). Complete Talent Management System (TMS) Privacy &amp; Information Security Trainings and HIPAA trainings. Complete VA orientation (in-person at VA HR Office and some TMS assigned trainings). Schedule PIV Badge appointment. Request Government Furnished Equipment (GFE) laptop ticket on VA yourIT. Access VA email in person at VA HR Office. Track laptop, desktop, and phone details. Request access to the Team PSD folder (see steps below). 4.10.1 Request Access to the Team PSD Folder Open the Microsoft Outlook desktop app. Navigate to your calendar. Right-click on My Calendars. Click on Add Calendar. Click on From Address Book. Search for yourself (last name, first name). Right-click on your name. Click on Properties. Find and make note of your alias displayed in the Alias: field. If you are a remote employee/contractor, use this website to determine your home VISN (e.g., if you live in Colorado, your VISN is 19). Make note of your VISN. Compose an email to Mary Kwan (mary.kwan@va.gov) requesting permission to the Team PSD folder and include the following information: Team member name Team member VHA alias Team member VISN Team member VA email The file path: \\r01palhsm07.r01.med.va.gov_researchResearch You will receive email confirmation from Mary Kwan when you have been granted permission to the Team PSD folder. Check if this drive is mapped to your GFE or remote desktop. Open File Explorer. Click on This PC. Under Network locations, do you see \\r01palhsm07.r01.med.va.gov_researchResearch? If not, follow the steps in the next section. 4.10.2 Map a Network Drive to Your GFE or Remote Desktop You may need to map a network drive to your GFE or remote desktop. The example used in this section is to map to the Team PSD folder. Open File Explorer. Right-click on This PC. Select Map Network Drive… . A pop-up window will appear. Select a drive letter. Tip: Be sure to select a drive that is not already in use. In the Folder: field, copy/paste in the drive or folder breadcrumb trail: \\r01palhsm07.r01.med.va.gov_researchResearch Be sure the Reconnect at sign-in checkbox is checked. Click the Finish button. You should see the mapped drive in File Explorer. If it does not, you may need to restart your computer (GFE) or log off/log back into VA Citrix (remote desktop) to see the mapped drive. 4.11 Onboard a Team Member through PAVIR HR sends offer letter to hew hire. New hire signs offer letter. HR sends Without Compensation (WOC) process email with instructions on completing WOC packet &amp; onboarding paperwork (TMS, Collaborative Institutional Training Initiative [CITI training], and fingerprinting). VA Palo Alto’s WOC Point of Contact: Linda Wester A Research Service Without Compensation employee is an individual who performs research-related duties without any direct monetary compensation from the Department of Veterans Affairs. CITI training is a basic research ethics online training course that all Team PSD partners must take and pass. Schedule fingerprinting, &amp; TB test. PI registers RDIS profile for new hire. Complete all assignments in RDIS, TMS privacy &amp; information security trainings, &amp; complete HIPAA trainings and CITI. Submit WOC packet to Linda (or equivalent point of contact in Palo Alto VA). Complete fingerprinting &amp; TB test. PI or R&amp;D adds new hire to IRB (see 6.7) and other platforms (GitHub/ZenHub, OSF, Lucidchart). Schedule a badge appointment after WOC packet is processed. Attend badge appointment and receive badge. Complete PAVIR orientation. PI or PeopleOps requests GFE laptop. PI or PeopleOps requests VA email. Request access to Team PSD folder by emailing Mary Kwan (Mary.Kwan@va.gov) with the team member’s VHA alias (find it in the GAL in Outlook Calendar), member’s VISN (also found in GAL), VA email, and the file path: NCPTSDResearch. 4.12 Create or Edit GitHub Issue Template Value Streams: Research, Development, Operations Workstreams: All Workflows: All Teams Channel Link GitHub Documentation is located here. Workstream Lead logs in to lzim account for relevant GitHub repository (or repo). Scroll down to Features. Click Set Up Template. Scroll down to edit and existing template for click “Create new Template.” Templates needed: Progress Reports IRB Renewal Training 4.13 Export Lists of Identifiable MTL Team Data for Research Analysis Value Streams: Research, Development, Operations Workstreams: All Workflows: All Video Teams Channel Link Identify/create lists of members, clinics, facilities, and team names (all identifiable data). Export team members from CRM. Review data ui clinic selections for MTL 2.0 teams (Team PSD &gt; Clinics folder for legacy data ui files) and MTL 3.0 teams such as sta3n, division, and clinic selections in Microsoft Teams chats. Review MTL 2.0 team notes in sunsetted https://mtl.how/team_tracker (IRB mod?). Analyze for Story A aim 2 (see issue #454). 4.14 Configure mtl.help and mtl.info Email Settings Value Streams: Research, Development, Operations Workstreams: All Workflows: All Teams Channel Link Add mtl.help@va.gov and mtl.info@va.gov inboxes to Outlook. Note: Default settings on both accounts only show emails for the last year. Once this process is complete, you will receive calendar and email notifications for all inboxes added to your account. To see emails older than one year, follow the following steps. You will be adding these emails as accounts which is different from adding their inboxes in Step 1 above. Navigate to the File menu (in Outlook) and select Add Account. Enter the email you want to add and select Connect. Wait for the next pop-up window to appear, then select Sign in as current user. You should see a confirmation that the account has been added. Close Outlook. Reopen Outlook; you will now see the newly added email in your Account Information (File &gt; Info). Navigate to Account Settings. Double-click on the email address to modify its settings. Change Exchange Account Settings to download email for the past by clicking on the slider and moving it all the way to the right. Select Next. Click Done. Close Outlook. You have now configured this inbox to download all past emails. Note: This change may take several days to take effect. 4.15 Team PSD Onboarding to Cadence Cycles (the why/how of who does what, when) Value Streams: All Workstreams: All Workflows: All Video 1 - onboarding + DSMB grant development Video 2 - co-deciding using our diverse lens Video 3 - user personas Video 4 - user personas, part 2 Video 5 - user personas, part 3 Video 6 - user personas, part 4 Video 7 - user personas, part 5 Video 8 - user personas, part 6 Teams Channel Link - onboarding to cadence cycles Teams Channel Link - onboarding Day 5, 200, 1800, 3100 Teams Channel Link - onboarding welcome: why, how, who does what, when? Teams Channel Link - user-centered Team PSD workflows &amp; user personas 7 Domains of User Personas: 1. Person (name) 2. Team PSD workflow(s) 3. Time (FTE, experience/knowledge) 4. Role 5. Interacts with other workflow users 6. Platforms 7. Why (value) 4.16 Develop Personal and Professional Goals to Make Meaningful Team PSD Progress Value Streams: Education, Development Workstreams: All Workflows: Resources: See Quarterly 1:1 and coach chat templates Teams Channel Link Annual reports, user story mapping, and annual reviews (processes to make progress). - Reports and reviews are like what we learned from Patton’s User Story Mapping book, Family vacation photo - They are just documents reflecting important processes to achieve key goals. Annual Report: - What matters is that we make continual progress. User Story Mapping: - Last quarter before report we ask what else would we really like to include. - The report itself is just the documentation of the entire year. Annual Review - What matters is that we set goals and work together to achieve them. - Quarterly 1:1s* and coach_chat** are used to get specific support related to you thriving in your role (your P.D.). - Coach chats are mini-check-ins related to the 4 Ps. The 4 Ps - Project - People - Process - Pattern Team-level: Key Performance Indicators (KPIs) - work flows delivering our value streams. Team-member level: S.M.A.R.T. - personal &amp; professional goals. 4.17 Roadmap of User Stories - User Story Mapping Value Streams: All Workstreams: All Workflows: All Video Example 1 video Example 2 video Example 3 video Teams Channel Link Story H - Hiring / Story T - Training User Story Mapping - Discovering the whole story, build the right product (Patton). Cake Wrecks - Learning idea that sensitizes us to the need to tell stories to understand each other better. Roadmap of User Stories Program Increment (PI) SAFe 5.1 - PI Objectives, Scaled Agile Framework NIH F2F &lt;&gt; IIR Progress/DSMB - Dependencies: synced, stepped, parallel, serial development with handoffs - Vertical view (same weekly sprint) to have a valid horizontal (over time) - Works in Progress (WIP) Limit - Reviewed our Zenhub reports regarding our - Key Performance Indicators (KPIs) - Flow-based KPIs and user story and story point WIPs “Making and meeting small commitments builds trust.” -Nonaka and Takeuchi, The Knowledge-Creating Company (from SAFe website) 4.18 Update Team PSD Website Value Stream: Education Workstream: All Workflows: All Video Teams Channel Link Log on to Forio Epicenter. Find the administrator_login group. Add users to the administrator_login group as needed. Update the Team PSD website in Sim PROD. Tip: Colors on the website are aligned with the value streams, not the workflows. 4.19 Offboarding a Team PSD Member Value Stream: Workstream: Workflow: Reference: #709, 2023_aug_epic #portfolio: Update Team PSD Manual to include offboarding/close out Notify team members of departure. Work with and notify team of handoffs. Remove from shared Outlook inboxes and calendars. Decline shared calendar invites. Remove leave from calendars and story maps. Remove from Lucidcharts license. Remove from GiHub and Zenhub licenses. Remove from Ci2i Admin Sharepoint, Remove from NCPTSD Staff trees. Remove NCPTSD Teams channels. Remove NCPTSD email groups. Remove PAVIR account statement distribution list (if applicable). Remove access to Team PSD shared folder. Move outgoing team member to alumni section of Team PSD website. Revoke ReQlogic access. Revoke RDIS/DAPA access to VAPAHCS/Zimmerman (email Luzille.Cowlah@va.gov). Remove Hawaii access. Remove [access to] Zotero. Request Craig (?) to end sponsorship of SUNet ID. Remove Team PSD Teams channels: Remove all TeamPSD. Remove TeamPSD Portfolio (if applicable). Remove MTL Teams channels. Remove from TeamPSD email list. Request Lindsey to remove from Lindsey calendar share. Palo Alto Research WOC closeout. Remove Ci2i email lists (done after WOC closeout). "],["5-co-coordinated-workstreams-rd-and-dataopsdevops.html", "Chapter 5 Co-coordinated Workstreams (R&amp;D and DataOps/DevOps) 5.1 Specific Workflows 5.2 Manage Research Repository Including Readme.md 5.3 Report progress for R21, R01, IIR grants 5.4 Contribute to a Team PSD Manuscript 5.5 Request New Research Data 5.6 Submitting a Requisition 5.7 Submit VACO and VAPAHCS Progress Report", " Chapter 5 Co-coordinated Workstreams (R&amp;D and DataOps/DevOps) 5.1 Specific Workflows mixed_methods_workflow: Integration of QUAL + QUAN mixed methods research. Co-coordinated by R&amp;D and DataOps. quant_workflow: Supports the research and operations value streams. Co-coordinated by R&amp;D and DataOps. 5.2 Manage Research Repository Including Readme.md Value Streams: Research, Development, Operations Workstreams: All Workflow: Coordinate work each quarter via story maps to ensure progress on each grant and tests of specific aims. Video Teams Channel Link Research Repo for R21: R21DA042198 Research Repo for R01: 1R01DA046651 Research Repo for IIR: I01HX002521 Ensure research repo including readme.md is current. Plan user stories and workflows to meet deadlines. Direct &amp; co-coordinate research, development, operations: Workflows Meetings Sprints Ensure progress on research repository for each with: Datafeeds R Notebooks Analyses for tests of specific aims Report Progress (see 5.2). 5.3 Report progress for R21, R01, IIR grants Value Streams: Research, Development, Operations Workstreams: All Workflow: Coordinate work each quarter via user story maps to ensure progress on each grant and tests of specific aims. Video Teams Channel Link Research Repo for R21: R21DA042198 Research Repo for R01: 1R01DA046651 Research Repo for IIR: I01HX002521 Enlist Readme.md for each grant to manage all people, platforms and deadlines. Review the grant &amp; clarify what was already reported in the last progress report. Coordinate across all workstreams, PI, &amp; Statistician to map our analytic with user story maps. Produce enrollment tables. *See Team PSD 3.0 Manual 6.6 - includes sending provider survey. Draft a new progress report combining the information above. Coordinate with PI to get approval and submit. Below is the flow of reporting for each grant: NIH R21DA042198 Participatory System Dynamics for Evidence-based Addiction and Mental Healthcare Check R21 Readme to manage all people, platforms, and deadlines. Review the previous year VA Palo Alto RDIS Report. Submit Va Palo Alto RDIS in June. NIH 1R01DA046651 Participatory System Dynamics vs Audit and Feedback A Cluster Randomized Trial of Mechanisms of Implementation Change to Expand Reach of Evidence-based Addiction and Mental Health Care Check R01 Readme to manage all people, platforms, and deadlines. Submit VA Palo Alto RDIS in February. Submit PAVIR Progress Report by November 1st &amp; coordinate eRA submission NIH November 15th. VA I01HX002521 Participatory System Dynamics vs Usual Quality Improvement: Is Staff Use of Simulation an Effective, Scalable and Affordable Way to Improve Timely Veteran Access to High-quality Mental Health Care? Check IIR Readme to manage all people, platforms, and deadlines. Submit ART VACO in January. Submit VA Palo Alto RDIS in June. Submit Data Safety &amp; Monitoring Board (DSMB) via ART update in December. 5.4 Contribute to a Team PSD Manuscript Review the open Team PSD manuscripts. Request access to OSF &amp; Zotero (via PI). Complete the authorship app for prior_work and writing. Sign up with R&amp;D for a consult at #manuscript_monday. Review the Team PSD Manual for additional guidance. 5.5 Request New Research Data R&amp;D adds team member to IRB with IRB modification on eProtocol. Principle Investigator (PI) adds user to ORD_workgroup in BaseCamp. DataOps submits a new DART request, which adds to VINCI project. Team member checks data access with SQL Server. 5.6 Submitting a Requisition Value Streams: Research, Development, Operations Workstreams: All Workflows: All Video Reference: Easy Instructions to Place a ReQlogic Order Teams Channel Link Get set up with ReQlogic. Navigate to ReQlogic and login. Click on the green requisitions bar on the top and you will see a menu pop up on the left-hand side. Select Requisition Entry. Push the plus button to start a new requisition entry. Fill out everything that is listed in blue. Push the Save button. You will see that nothing is blue anymore. Tip: You can always edit by pressing the pencil next to the save button. Enter justification notes. Fill out item summary. Sign your invoice. Click Submit. 5.7 Submit VACO and VAPAHCS Progress Report Use ReadMe to track deadlines for all grants &amp; reports. Develop user story maps to ensure progress on tests of specific aims in the months prior to reporting. Enrollment tables: coordinate w/PeopleOps Manager. Analyses for Tests of Specific Aims - coordinate with Statistician. Put together first draft of report using last year’s drafts. Coordinate with PI to get approval and submit. NIH R01 VA Palo Alto RDIS - February NIH Annual Progress Report - 11/15 PAVIR Progress Report coordinate eRA submission NIH 11/15 VA IIR ART VACO - January VA Palo Alto RDIS - June DSMB update - December "],["6-research-and-development-workstreams.html", "Chapter 6 Research and Development Workstreams 6.1 Specific Workflows 6.2 Manage Research &amp; Development Workstream Permissions 6.3 Achieve Research Value Stream Key Performance Indicators (KPI) 6.4 Manage Research Calendar and Inbox mtl.info@va.gov 6.5 Coordinate #manuscriptmonday 6.6 Coordinate team_time 6.7 Produce Patient and Provider Enrollment Tables for Progress Reports - R01 and IIR Aim 1 and Aim 2 6.8 Renew or Modify the IRB with Stanford eProtocol 6.9 Submit an NIH Grant with PAVIR 6.10 Submit a Grant to the VA 6.11 Manage Authorship App 6.12 Manage Manuscript Tracker 6.13 Submit a Peer-reviewed Manuscipt 6.14 Send Standford QI Course Evaluations 6.15 Manage Search Engines for Websites 6.16 VHA ORD VAPAHCS will use IRBNet and RDIS Concurrently to Manage Active VA Stanford IRB-approved Research Projects", " Chapter 6 Research and Development Workstreams 6.1 Specific Workflows co-i_workflow: Supports the research value stream. Coordinated by Research &amp; Development (R&amp;D). post_bacc_mentorship: Supports the research and operations value streams. Coordinated by R&amp;D. post_doc_mentorship [resident, CDA/K mentorship?]: Supports the research and operations value streams. Coordinated by R&amp;D. 6.2 Manage Research &amp; Development Workstream Permissions Value Stream: Research Workstream: R&amp;D Workflow: Coordinate research workflow permissions, manuscripts, budgets, oversight, IRB, reporting, and measurement. Video Teams Channel Link 6.2.1 GitHub TeamPSD Repo *See Team PSD Manual section 5.1. Research Repo for R21: R21DA042198 Research Repo for R01: 1R01DA046651 Research Repo for IIR: I01HX002521 Sign in using lzim GitHub login details in TeamPSD Shared Drive &gt; Vendors. Ping Lindsey to approve 2-factor login within 1 hour. Go to the Settings tab &gt; Access in the GitHub teampsd repo. Sign in and add user’s GitHub username under “Contributors”. 6.2.2 OSF Sign in with your own OSF account. Go to the OSF project you want to add users to . Click on the “Contributors” tab in the top header of the project. Check to see if you have the “Administrator” role . If not, only Lindsey can add users to the project. If you are an administrator, click on the green “+ Add” icon and search by the user’s name to find and add them. 6.2.3 ReqLogic (Grant Subawards &amp; Purchases)  Open the ReqLogic link in Google Chrome (Edge will attempt you read your PIV login). Login using Lindsey’s details at Team PSD Shared Drive &gt; Vendors.  (NOTE: Should we request our own accounts?) Click on “Requestions” at the top of the page . Select “My Approvals” to review and/or confirm Subawards. 6.2.4 RDIS Lindsey, R&amp;D Workstream Lead will set up RDIS accounts for new hires . As of May 2022, RDIS projects by ID include: ZIM0001  ZIM0002  ZIM0003  ZIMMINI_0003  ZIMMINI_0001  ZIMMINI_0002  Add members to draft and/or review tasks in a project by clicking on “Project Personnel” under “Process”. Click on the blue “Add New” button in the bottom right-hand corner. Assign the appropriate role based on their duties within the scope of practice  . 6.2.5 eProtocol Access eProtocol by logging in with your Stanford SUNet ID . To request a sponsor for a SUNet ID, email Craig Rosen and cc Lindsey and appropriate team members . Team members need to provide Craig with their date of birth and VA emails. Craig will sponsor you and SUNet ID account access will be sent to your VA email . Logging into eProtocol, team members should see all of our grants. If they do not, you must add them to the IRB of each grant.   6.2.6 PCSPDB Updated yearly, requested by NCPTSD Admin team. If you do not have access to the PCSPDB dashboard, email the coordinator Ella Koosis . PCSPDB Schedule (follows Federal Fiscal year 10/01 start and 09/30 close). IIR Fiscal Update Contact is Jim Griffith of VAPAHCS ORD. R01 Fiscal Update Contact is Marisela Diaz of PAVIR . 6.2.7 VA REDCap Set up a VA REDCap account by clicking on the red “Ask for Help” tab in the upper left of the homepage . Request a VA REDCap account by filling out the request form. Set up your account username (VHA alias, find yours by searching for yourself in the GAL in Outlook Calendars) and password from the email you receive from REDCap. Grant access to all our projects as of May 2022: MTL Live Fidelity Ratings [Final] Modeling to Learn Follow-up (R01 Baseline 1a) [Final] Modeling to Learn Follow-up (R01 6 month 2a) [Final] Modeling to Learn Follow-up (IIR Baseline 1b) [Final] Modeling to Learn Follow-up (IIR 6 month 2b) To grant access, click on the project and scroll down to find “User Rights and Permissions”, then click “User Rights” . Add users and assign the “Full Access” role. NOTE: VA REDCap will “suspend” or deactivate your account if you have not logged in the past 90 days. To re-activate, click on the red “Ask for Help” tab on the homepage and fill out the request form.   6.2.8 Stanford REDCap  To request a sponsor for a SUNet ID, email Craig Rosen and cc Lindsey and appropriate team members. Team members need to provide Craig with their date of birth and VA emails . Craig will sponsor you and SUNet ID account access will be sent to your VA email. Scroll back down on Stanford REDCap and click “Email Support”. Fill out the form and ask to request a Stanford REDCap account. 6.2.9 ART (VA grants)  ART is the system for registering our VA-funded Clinical Trials (e.g., IIR). IIR 17-294 - Palo Alto - Participatory system dynamics vs usual quality improvement. 6.2.10 ClinicalTrials.gov  ClinicalTrials.gov is the system for registering our NIH and PAVIR-funded Clinical Trials (e.g., R01). Lindsey’s Pro Tip: Use Chrome to save your logins and passwords to efficiently log into your account. Note: For more details on how to set up Fidelity Ratings in VA REDCap, check this post from consult_workflow. 6.3 Achieve Research Value Stream Key Performance Indicators (KPI) Cumulative Flow. See Reading Cumulative Flow Diagrams. Control Chart. See Use Control Charts to Review Issue Cycle/Lead Time. Burndown Report. See Track Sprint Progress with Burndown Charts. Velocity Tracking. See Track Team Velocity Sprint-over-Sprint. 6.4 Manage Research Calendar and Inbox mtl.info@va.gov PI add R&amp;D Workstream Lead to MTL Info calendars. Review Calendars &amp; Inbox daily. Send all research-related communication from mtl.info@va.gov. 6.5 Coordinate #manuscriptmonday Track #MM meetings and open slots. Check Manuscript Tracker. Check paper progress on OSF. Contact authors of papers-OSF, Teams. Block #MM Slots. Authors circulate paper-OSF, reminders via Teams &amp; Email. 6.6 Coordinate team_time Track team_time meetings and open slots. Check Manuscript Tracker. Check paper progress on OSF. Contact authors of papers-OSF, Teams. Block team_time Slots. Authors circulate paper-OSF, reminders via Teams &amp; Email. 6.7 Produce Patient and Provider Enrollment Tables for Progress Reports - R01 and IIR Aim 1 and Aim 2 Value Streams: Research, Development, Operations Workstreams: All R&amp;D: Ensure co-coordinated, timely progress report development, review, &amp; submission. DataOps: Refresh R01 &amp; IIR data feeds, produce enrollment tables, &amp; update R Notebooks on Research Repo for each team of each trial. PeopleOps: Communicate, schedule, collect, and report timely flow (dates) of co-planning, team meetings, &amp; provider surveys. Workflows: for R01 &amp; IIR Patient Enrollment - EHR/CDW (Aim 1a &amp; 1b) Provider Enrollment - Baseline &amp; 6-Month Surveys (Aim 2) Teams Channel Link *Includes sending provider surveys. *Cross-reference: Story J Team PSD 3.0 - 9 Data Feeds #2445 (2022 RoadMap Story J) *Cross-reference: 8.11, Coordinate ILEAD Live Team Meeting Accreditation and Attendance 6.7.1 Produce R01/IIR Aim 1 Provider Enrollment Tables from SSMS &amp; CDW (Aim 1a &amp; 1b) Value Stream: Research Workstream: DataOps Workflow: quant_workflow Teams Channel Link info forthcoming from David 6.7.2 Produce R01/IIR Aim 2 Provider Enrollment Tables from VA REDCap https://lzim.github.io/teampsd/6-research-and-development-workstreams.html#send-provider-surveys - Value Stream: Research - Workstream: R&amp;D - Workflow: quant_workflow, portfolio_workflow Teams Channel Link Note: for this example, we are showing how to get to IIR 6 month provider survey. 1. Navigate to VA REDCap. 2. From the top navigation bar, select My Projects. 3. Select [Final] Modeling to Learn Follow-up (IIR 6 month 2b). 4. Click on Data Exports, Reports and Stats on the left-hand navigation bar. 5. Select My Reports &amp; Exports tab. 6. Click on + Create New Report button. 7. Create a standard name for your report using the MTL Teams name. - release - version (red/blue) - PROD or TEST - sta3n facility - alexandria_pct 8. Scroll down to Step 2 and click the + Quick Add button. 9. Scroll down to Follow-up Participatory Measure Partnership and click on Select All. **Note: VA IIR Aim 2 Mediatory is Participatory Learning (NIH R01 Aim 2 Mediator will have the systems thinking items). - A total of 93 files selected for the VA IIR Aim 2 Mediator at 6 months. - See also https://mtl.how/measures. 10. Click Select All under all + Quick Add options. 11. Click the Close button. 12. Scroll down to click on Step 3 to review a specific site to track engagement and see how many people completed this survey for a specific site. 13. Scroll down and click the Save Report button. 14. Receive the confirmation that the site level report was created. Click on Return to My Reports &amp; Exports. 15. Review the total sites listed and View Report button. 16. You’ll see the number of results returned, the number of records queried, and feedback. 17. Click back on the My Reports &amp; Exports tab to produce the Provider Enrollment Table. 18. Click the + Create New Report button to create the provider enrollment report, which will track enrollment for all sites moving forward. 19. Fill in the Name of Report: field. 20. Scroll down to Step 2 and click the + Quick Add button. 21. Scroll down to the Demographics section, choose Select All, and click Close button. 22. Scroll all the way to the bottom and click Save Report button. A pop-up will appear saying your report has been saved. 23. Click the View report button. You will see the Provider Enrollment Table. 24. There is a PHS standard format for enrollment tables. 25. Navigate to the enrollment_tables folder in the appropriate folder within Team PSD &gt; Grants. Note: This information is reported to: - NIH &amp; VA - Progress Reports eRA Commons or DSMB - Any IRB Modifications also need to report enrollment Patient Enrollment 1. MS Teams. 2. Outlook mtl.info@va.gov. 3. CRM - Task list. 4. VA REDCap - setting the team up in Provider Survey. 5. Track the dates for this team for analyses. Patient Enrollment 1. wk3_oct_epic story12: Prep Human Subjects Enrollment tables for R01 grant, #249 2. wk4 Oct_epic story 11: R01 human subjects enrollment table QA prod card, #278 6.8 Renew or Modify the IRB with Stanford eProtocol Value Stream: Research Workstream: R&amp;D Workflow: Coordinate research workflow permissions, manuscripts, budgets, oversight, IRB, reporting, and measurement. Teams Channel Link *Cross-reference: #343, Story A2 &amp; A3 Submit R01 &amp; IIR IRB Mods Check ReadMe (R21, R01, IIR) for anticipated Renewal Date and ensure user story maps plan a feasible approach to any updates. Research Repo for R21: R21DA042198 Research Repo for R01: 1R01DA046651 Research Repo for IIR: I01HX002521 Work with Dr. Craig Rosen &amp; PI to set up your Stanford SUNetID. Principle Investigator adds R&amp;D to eProtocol as Admin Contact. Confer with all workstreams to identify any changes in staffing or methods on the protocol. R&amp;D &amp; DataOps review anticipated modifications with PI at team_time or mixed_methods or quant_research workflow meeting no less than 2 weeks before submission. R&amp;D creates modification on eProtocol. PI reviews and approves (future state: R&amp;D). DataOps makes DART and VINCI modifications after IRB approval (when necessary). 6.9 Submit an NIH Grant with PAVIR 6.10 Submit a Grant to the VA 6.11 Manage Authorship App See Authorship App 6.12 Manage Manuscript Tracker 6.13 Submit a Peer-reviewed Manuscipt 6.14 Send Standford QI Course Evaluations 6.15 Manage Search Engines for Websites 6.16 VHA ORD VAPAHCS will use IRBNet and RDIS Concurrently to Manage Active VA Stanford IRB-approved Research Projects Value Stream: Workstream: Workflow: Reference: IRBNet Reference: VAIRRS Webinars Teams Channel Link Register your IRBNet user account. Receive the registration confirmation. IRBNet Projects were transferred by the VAPAHCS Research Administration Office to the PI. NIH R21DA042198 (R21), Project Title: [1714508-1] Participatory System Dynamics for Evidence-based Addiction and Mental Healthcare NIH 1R01DA046651 (R01), Project Title: [1714509-1] Participatory System Dynamics vs Audit and Feedback A Cluster Randomized Trial of Mechanisms of Implementation Change to Expand Reach of Evidence-based Addiction and Mental Health Care VA I01HX002521 (IIR), Project Title: [1714510-1] Participatory System Dynamics vs Usual Quality Improvement: Is Staff Use of Simulation an Effective, Scalable and Affordable Way to Improve Timely Veteran Access to High-quality Mental Health Care? "],["7-dataops-workstreams.html", "Chapter 7 DataOps Workstreams 7.1 Specific Workflows 7.2 Manage DataOps Workstream Permissions 7.3 Achieve Development Value Stream Key Performance Indicators (KPI) 7.4 Manage VA Contracts 7.5 Sync Bug Tracker Progress to Squash Team PSD and Research Bugs 7.6 Sync Feature Tracker Progress to Develop Team PSD and Research Features 7.7 Coordinate a Code Review 7.8 Update an R Notebook 7.9 Improve MSD365 (CRM) Integration (see d365 label) 7.10 Refresh Data for R01 or IIR 7.11 Update a Vensim Model 7.12 Update Sim UI Module Documentation 7.13 Update the Power BI Data UI Instances (w/example) 7.14 Report Data UI and Power BI Use Data (w/example) 7.15 Update a Power BI Data Report and Test through Deployment Pipeline (DEV/TEST/PROD) 7.16 Schedule Daily Data UI Refresh 7.17 Create a Test Release Branch for a lzim/teampsd New Version Release", " Chapter 7 DataOps Workstreams 7.1 Specific Workflows support_workflow: This coordinated workflow of both quant_workflow and sim_ui_workflow is in support of development and operations value streams. Coordinated by DataOps. sim_ui_workflow: This workflow provides design, maintenance, and operational support of the MTL Simulation User Interface (Sim UI) in support of development and operations. Coordinated by DataOps. msd365_workflow: Supports the operations and development value streams. Coordinated by DataOps. 7.2 Manage DataOps Workstream Permissions Value Stream: Workstream: Workflow: Reference: Check the Research Repo. (Navigate to data_ui and check the New Programmer Guide.) Teams Channel Link GitHub research repo Sign in using lzim GitHub login details in TeamPSD Shared Drive &gt; Vendors. Ping Lindsey to approve two-factor login. Go to the Settings tab &gt; Access in the GitHub teampsd repo. Sign in and add user’s GitHub username under “Contributors”. Basecamp (CDW) Get National Data Access to CDW, required to view data in the data UI. DART Go to DART Dashboard. Click on User Guide and read all chapters for orientation on how to request, submit, and manage a DART request. Follow instructions on Participants in Chapter 4 on how to add members and prerequisites. VINCI Content needed. SSIS Content needed. Power BI Premium App Workspace (MTL Data UI &amp; Team PSD 3.0) 1. Install Power BI Desktop onto your laptop from the Software Center. 2. Request a Pro Power BI License first to request a premium app workspace. 3. Follow BISL’s Power BI documentation on what premium workspaces are and how to request them at SharePoint. 4. Navigate to Power BI after BISL sets up your premium workspace. 5. Click on the workspace icon in the bottom left-hand corner (looks like a stacked deck of cards). All Team PSD members should have access to the following premium workspaces: PTSD_OMHO [Dev] PTSD_OMHO Test PTSD_OMHO [Prod] TeamPSD 3.0 Data Pipeline [Dev] TeamPSD 3.0 Data Pipeline Test TeamPSD 3.0 Data Pipeline [Prod] If you do not have access to these workspaces, follow these steps: Click into the premium workspace (has a diamond icon). In the premium workspace, click on the “Access” tab in the top header. Add the emails of Admins into the workspace. Individual Pro Power BI Licenses Members who are DEVeloping, QA’ing, and PROD’ing on PowerBI will need a Pro Power BI License. You know you have a Pro License by going to Power BI and clicking on your icon in the upper right to view your license type. Follow BISL’s Power BI documentation on what Pro Licenses are and how to request them at SharePoint. Power BI Workspace Deployment Pipelines Deployment pipelines are used to automate deploying fixes and features from Dev &gt; Test &gt; Prod. Follow BISL’s Power BI documentation on more info on deployment pipeline and how to request them at SharePoint. PTSD_OMHO Gateway Access on Power BI Open a LEAF request. Select “PBI Add Access to Data Source Gateway” and fill out information including the server and the data set. A gateway access is per-user and allows users to connect their published Power BI instances to the PTSD_OMHO workgroup. See 7.12, Report Data UI and Power BI Use Data, for more details. This can be approved without PI approval. Forio Epicenter Sign in with your own Epicenter account. Scroll down and click on the “Veterans Affairs (13)” project. Click on “Members” in the left-hand navigation. Click on “Add Member” to add the email of the member and assign the “Author” role. Note: Author role gives the ability to delete all of our projects/websites hosted on Forio (mtl.how/team, mtl.how/demo, mtl.how/sim, mtl.how/menu), be extremely cautious in this platform. 7.3 Achieve Development Value Stream Key Performance Indicators (KPI) Cumulative Flow. See Reading Cumulative Flow Diagrams. Control Chart. See Use Control Charts to Review Issue Cycle/Lead Time. Burndown Report. See Track Sprint Progress with Burndown Charts. Velocity Tracking. See Track Team Velocity Sprint-over-Sprint. 7.4 Manage VA Contracts 7.5 Sync Bug Tracker Progress to Squash Team PSD and Research Bugs See TeamPSD/Bug Tracker See Research/Bug Tracker In lzim/teampsd or lzim/research, open a new issue and select BUG template. Complete filling out the issue template. Provide a screenshot of the problem if possible. Save the issue. When saved, it will automatically go to Triage Kanban in the respective Bug Tracker. Triage bug and determine if the information is complete. If there is a question, discuss at the Workstream Leads meeting. Estimate the story points needed to resolve and select the resolution path (Breakfix or normal). When bug is being fixed, move card to In Progress swimlane. When complete, move to Review/QA swimlane. After successful review, close the issue. 7.6 Sync Feature Tracker Progress to Develop Team PSD and Research Features Value Streams: Research, Development, Operations Workstreams: All Workflows: All Video - This training video provides and example of how to request a new feature, including how to think through several cross-cutting dependencies. Here is the example feature covered in the video to change the password creation process for the MTL Menu for MTL 3.0: #2699. Reference: mtl.how/features Reference: mtl.how/research_features Teams Channel Link Request a New Feature 1. Navigate to one of the two feature trackers: - Research: https://mtl.how/research_features - Development or Operations: https://mtl.how/features 2. All feature requests begin in the needs_triage. 3. Click on Issues at the top navigation bar. 4. Click on the green New Issue button. 5. Select Feature. This GitHub issue template shows what kind of information is needed for a Feature. 6. Delete that information and replace it with the information for your Feature. 7. On the right panel, click Projects, then select research_feature_tracker or feature_tracker. 8. When done, click the green Submit new issue icon. Workstream and Workflow Leads will scope the requirements for the new Feature. 7.7 Coordinate a Code Review 7.8 Update an R Notebook Video R Notebooks enlist 2 API Tokens Use Lindsey’s GitHub lzim/research account for an API token (Team PSD folder &gt; Vendors). Request a REDCap API token (IRB approval &amp; VA REDCap approval is required first; the token will expire after 90 days). Install R, R Studio, &amp; GitHub desktop on your VA GFE by opening a yourIT Help Center ticket. 7.9 Improve MSD365 (CRM) Integration (see d365 label) mtl.how/crm 7.10 Refresh Data for R01 or IIR Value Streams: Research, Development Workstream: DataOps Workflow: for refreshing data for our R01 and IIR trial Teams Channel Link 7.11 Update a Vensim Model Model variable changes i Information update Update models in client github clone lzim/mtl DEV branch. Save .mdl and .vmfx model formats and save to DEV branch. Merge GitHub Client DEV with GitHub web DEV. Test model function in Epicenter MTL DEV project. If pass, merge DEV branch to TEST branch. Test as required. If pass, then promote TEST to MAIN branch. 7.12 Update Sim UI Module Documentation More Information. Tutor. MTL Demo Website. Team PSD Website. 7.13 Update the Power BI Data UI Instances (w/example) Value Stream: Development, Operations Workstreams: DataOps Workflow: support_workflow, quant_workflow Video Teams Channel Link Request a Pro License to use Power BI instances. Install Power BI Desktop App (if not already on your VA GFE laptop). Request a Premium Capacity Workspace. If a new premium workspace is required, navigate to LEAF to request a Power BI Premium Workspace. Navigate to Power BI website. Existing TeamPSD members can grant access to Team PSD premium workspaces and specify their role groups/user type (e.g., Admin). Once within the workspace (instance), click on Access to add new users. Once within the Access page, enter user email (for the team member you want to add), and set their role to ADMIN, and click Add. Navigate to the shared PTSD_OMHO workspaces (DEV, TEST, PROD instances) Tips &amp; Tricks: Access to premium workspaces is granted in real-time. If you do not see them yet, then refresh your browser. Navigate to the Deployment Pipeline icon on the left-hand navigation menu (rocket icon). Navigate to PTSD_OHMHO Pipeline, click Acccess, and add user email and set role to ADMIN. Add users to grant Access (i.e., Admin access). Note: Toggle “On/Off” must be “Off” to add new Users. Toggle “On” to add/update workspace permissions. Review the data pipeline (DEV, TEST, PROD). Select the Modeling to Learn Data UI Landing page (https://mtl.how/data). Request Gateway Access to the PTSD_OMHO Workspace. Take over ownership of any reports in Production that you will be overwriting. 7.14 Report Data UI and Power BI Use Data (w/example) Value Streams: Research, Development, Operations Workstream: DataOps Workflows: support_workflow, quant_workflow Teams Channel Link Navigate to the Power BI app home page. Click on the Workspaces icon in the left-hand navigation panel. From the Team PSD Power BI instances, select PTSD_OMHO [Production]. Find the VISN report for the Modeling to Learn site. Select the Blue Report icon, NOT the Orange Dataset icon. Hover over the 3 dots […] for the selected report. Click View usage metrics report. Power BI will indicate the report is loading. View Usage Metrics for the VISN. Collect data on MTL team members’ use in the User Panel. Example: IIR Wave 1, TEST, VISN 6 - Durham, MTL Red Report usage Report performance Report list Pin to dashboard 7.15 Update a Power BI Data Report and Test through Deployment Pipeline (DEV/TEST/PROD) 7.16 Schedule Daily Data UI Refresh Teams Channel Link Note: After you have taken over ownership of a dataset in production or have pushed a change to production, make sure the data refreshes are still scheduled daily for each dataset in the deployment pipeline. Go to the Production workspace. Go to settings for the dataset you want to schedule a refresh for. Under Settings for Data, click the arrow next to Gateway connection. This will turn the Schedule refresh from gray to a black clickable option. Select Schedule refresh once it becomes clickable. Under Schedule refresh, select the ‘on’ toggle, then request a daily refresh frequency for a time between 1-4 a.m. Select both the Dataset owner and mtl.help@va.gov for ‘send refresh failure notifications to’. 7.17 Create a Test Release Branch for a lzim/teampsd New Version Release When MTL goes from one version to a higher version, documentation, models and other materials contained in the lzim/teampsd repository must be tested. To prevent mixing up test version materials with materials in use, a test branch must be created. The branch also moves current versions of materials to an archive folder and the new models must be moved into the next version folder. All of these actions are automated with the make_test_release_branch.yml action. The sections below explain how to set up the action yaml file. 7.17.1 test_release_branch Creation Procedure Navigate to gh-pages branch Navigate to the .github/workflows folder Open make_test_release_branch.yml file. Make the modifications shown below. Enter the name of the previous model folder. This tells the action where to look for the present models. Enter the name of the next version model folder. This tells the action what the new model version folder name is going to be. Enter the name of the new release. This will tell the action what to name the new release folder for all the training materials. The FindReplace string will find all instances of the words or strings after “find” and replace with the word or string immediately following “replace.” This string is unlimited and can find as many characters, words or strings as desired. When the test_version_release.yml file instructions are updated, commit the changes. Navigate back to the branch navigation button. Type in the new version test release branch name and press enter. The action should fire when the new branch is created. This can be monitored by clicking on the Actions tab. type in “gh-pages_test_version_release_x_to_x” the “test_version” in the name will trigger the action. “x_x” indicates the current release and the future release. "],["8-peopleops-workstreams.html", "Chapter 8 PeopleOps Workstreams 8.1 Specific Workflows 8.2 Manage PeopleOps Workstream Permissions 8.3 Achieve Operations Value Stream Key Performance Indicators (KPI) 8.4 Manage Operations Calendar and Inbox 8.5 Set Up and Send R01/IIR Aim 2 Provider Surveys using VA REDCap 8.6 Engage a New MTL Co-planning Group 8.7 Set up a New MTL Live Team without Research Evaluation 8.8 Set up a new MTL Live Team with Research Evaluation 8.9 Facilitate an MTL Live Team w/Research Evaluation &amp; CRM 8.10 Set Up a New Co-planning Group or Team from a Site in VA REDCap for Fidelity Ratings 8.11 Purchase through ReqLogic 8.12 Coordinate ILEAD Live Team Meeting Accreditation and Attendance 8.13 Coordinate All Hands 8.14 Coordinate Non-research External Partners 8.15 Orient Team Members to Documentation Needs Using The Document Archive", " Chapter 8 PeopleOps Workstreams 8.1 Specific Workflows consult_workflow: VACO OMHSP Facilitators of the NIH &amp; VA cluster randomized trials. Supports the research and operations value streams. Coordinated by PeopleOps. mtl_hawaii_samsha_workflow: Internal Team PSD meetings to discuss Data to Wisdom Grant with Hawaii Dept of Health. Coordinated by PeopleOps. ilead_workflow: Supports the operations and development value streams - MTL Live, MTL Video, &amp; MTL Facilitate with VA Institute for Learning, Education, and Development (ILEAD). Coordinated by PeopleOps. vapor_workflow: The Veterans Affairs Partnership for Operations Research (VAPOR) is a group of Peer Support Specialists that ensure Veterans’ voices and experiences are represented in MTL and at the stakeholder table. 8.2 Manage PeopleOps Workstream Permissions 8.2.1 GitHub mtl repo Sign in using lzim GitHub login details in Team PSD Shared Drive &gt; Vendors. Ping Lindsey to approve two-factor login. Go to the Settings tab &gt; Access in the GitHub teampsd repo. Sign in and add user’s GitHub username under “Contributors.” 8.2.2 LucidCharts 8.2.3 ReqLogic Purchasing Open the ReqLogic link in Google Chrome (Edge will attempt to read your PIV login). Login using Lindsey’s details at Team PSD Shared Drive &gt; Vendors. (Note: Should we request our own accounts?) Click on “Requisitions” at the top of the page. Select “Requisition Entry” to begin a new purchasing requisition. 8.2.4 Microsoft Dynamics 365 SaaS CRM Instance Provisioning 8.2.5 Microsoft Dynamics 365 SaaS CRM User Access Provisioning 8.2.6 Admin permission for mtl.how/team &amp; mtl.how/demo 8.2.7 Setup MTL Channels and SharePoint Sites 8.2.8 Manage Rebrandly URL quick links PW is in Team PSD Folder &gt; Vendors. 8.3 Achieve Operations Value Stream Key Performance Indicators (KPI) Cumulative Flow. See Reading Cumulative Flow Diagrams. Control Chart. See Use Control Charts to Review Issue Cycle/Lead Time. Burndown Report. See Track Sprint Progress with Burndown Charts. Velocity Tracking. See Track Team Velocity Sprint-over-Sprint. 8.4 Manage Operations Calendar and Inbox mtl.help@va.gov Check if you have access to the MTL Help Operations Calendar &amp; Inbox at Team PSD Manual. Review the Calendar by meeting series colors (green = co-plan, purple = prep, blue = MTL Blue, red = MTL Red). Review and bring up Out Of Office (OOO) notifications, calendar holds, and missing invites/meetings. Review the inbox and bring up unaddressed emails and questions. 8.5 Set Up and Send R01/IIR Aim 2 Provider Surveys using VA REDCap Value Stream: Research Workstream: PeopleOps Workflow: systems_sme_workflow Teams Channel Link *Cross-reference: R&amp;D Workstream Setup Tasks, Team PSD Manual section 6.1 1. MS Teams channel must be set up first (see 8.6, Set up a New MTL Live Team without Research Evaluation). 2. Track the dates for this team for analyses in this Excel file. - File location: consult_workflow/Files/mtl_live_ees_team_links_table/ees_mtl_live_team_links_table_master.xlsx - [Final] Modeling to Learn Follow-up (R01 Baseline 1a) - [Final] Modeling to Learn Follow-up (R01 6 month 2a) - [Final] Modeling to Learn Follow-up (IIR Baseline 1b) - [Final] Modeling to Learn Follow-up (IIR 6 month 2b) 3. Set up the team in Provider Surveys on VA REDCap. 4. Copy the relevant survey template from TeamPSD\\0_final_post_covid19_site_list_templates into a draft email from the MTL Info shared inbox 5. Activate and copy the Team’s group email from the Directory from Microsoft Azure into the email draft. 6. Tailor the email draft and send. 8.6 Engage a New MTL Co-planning Group Video Set up and prep Co-planning folders and documents in Team PSD Shared Drive &gt; Grants. Set up all Co-planning groups in CRM. Set up Co-planning sites in Fidelity Survey on VA REDCap. https://mtl.how/fidelity Discuss communication plan for Co-planning groups at facilitate_workflow. Send Co-planning 1 or 2 templated emails from Outlook - mtl.help@va.gov. Send Co-planning meeting invite from Outlook - mtl.help@va.gov. Team PSD Clinics 8.7 Set up a New MTL Live Team without Research Evaluation Value Stream: Operations Work Stream: PeopleOps Workflow: This procedure is for setting up a new MTL Live team that is NOT being evaluated in a Federal trial. Video 1 Video 2, for steps 2 &amp; 3 Teams Channel Link Create a new Team in the Teams App. #mtl_facilitate #train_workflow #microsoft_teams #operations Create a meeting link in the new Teams Channel. Set up the Co-facilitator Prep and Live Team meeting series in Outlook - mtl.help@va.gov. Email Joseph Bloomquist from EES through MTL Help inbox to accredit MTL Live Team meeting dates obtained from Co-planning 2 (stand-alone video shared w/ees_workflow). Set up the MTL Live Team in the Sim UI (stand-alone video shared w/facilitate_workflow). 8.8 Set up a new MTL Live Team with Research Evaluation Value Stream: Operations Work Stream: PeopleOps Workflow: facilitate_workflow Video 1, set up a co-planning group or team for Fidelity Ratings in VA REDCap Video 2, set up a new fidelity rater in REDCap Teams Channel Link, Set up a Co-planning Group or Team for Fidelity Ratings VA REDCap Teams Channel Link, Delete a Rating in VA REDCap Create a folder for the MTL Live Team in Team PSD Shared Drive &gt; Clinics. Set up the MTL Live Team in the CRM. Set up an MTL Live Team for Fidelity Ratings in REDCap. Set up an MTL Live Team for Provider Surveys in REDCap. Create a new Team in the Teams App. Create a meeting link in the new Teams Channel. Set up the Facilitator Prep and Live Team meeting series in Outlook (mtl.help@va.gov and mtl.help@va.gov). Email Joseph Bloomquist from ILEAD through MTL Help inbox to accredit MTL Live Team meeting dates obtained from Co-planning 2. Set up the MTL Live Team in the Sim UI. 8.9 Facilitate an MTL Live Team w/Research Evaluation &amp; CRM Value Stream: Operations Work Stream: People Ops Workflow: for setting up a new MTL Live Team in the facilitate_workflow for R01 &amp; IIR Trial Evaluation Video - TBP Teams Channel Link 8.9.1 Prioritize &amp; Practice in Co-facilitator Prep Channel of Microsoft Teams Above where it shows your MTL Team name at the top of the page, click on the “Session &amp; Checklist Details” tab underneath to add/edit session notes for prep. Double-click on a session under the list of “Session Details” to access session notes. Tip: Double-click on any white spaces to avoid editing a field (e.g., white space after “S01” in the first column). Add a note for each of the following from mtl.how to tailor and edit during your prep session: Say Checklist Partner, Build, or Apply Fidelity Live Meeting notes  8.9.2 Navigate to your MTL Teams in Dynamics CRM By default, you’re in the Dynamics 365 “General” tab (link uses MTL Blue OKC as an example). Navigate to the “Current Status Dashboard” on the CRM https://mtl.how/crm. Click on your mapped MTL Team shown in the “My MTL Teams” dashboard to the right. 8.9.3 Fill in General Team Details Review/add your Facilitator Info (taken from mtl.how/team), Team Vision, and Team Decisions throughout the program in this tab. Once you mark session tasks complete, the “Current Session” field will automatically update overnight.   8.9.4 Complete Session Tasks in Dynamics CRM Scroll down on the “Session &amp; Checklist Details” tab to view complete session tasks listed under “MTL Team Checklist”. Click into a task to edit the task or click “Mark complete” in the top navigation header of the task. Tip: Double-click on any white spaces to avoid editing a field (white space after “S01” in the first column). 8.9.5 Send Pre/Post Emails using GitHub templates Navigate to the GitHub mtl repo. Navigate to the MTL Red or MTL Blue folder and drill down to the part/session needed. Select all the contents in the applicable pre/post email in the .md file and copy it . Open the MTL Help calendar in Outlook and find the live team meeting invite . Right-click on the invite and select “Reply All”. Remove all contents in the email that pop-ups except for the meeting link . Paste your copied pre/post email from GitHub . Tailor the contents of the template (e.g., date/times, team vision, Facilitator info by copying the content from the “General” tab, and TMS videos for post emails) and hit send! 8.10 Set Up a New Co-planning Group or Team from a Site in VA REDCap for Fidelity Ratings Value Stream: Operations Workstream: PeopleOps Workflow: consult_workflow, systems_sme_workflow Video #fidelity_ratings, #redcap, #fidelity_survey, #consult_workflow Teams Channel Link, 5/2/22 Teams Channel Link, 8/24/2023 Navigate to REDCap &gt; MTL Live Fidelity Ratings. Click on Project Setup. Click on Online Designer. Click on Copy in Survey Settings and rename the instrument. Click on the instrument name by the pencil icon. Create new item and Variable Name. Set up a new team in VA REDCap to track fidelity ratings: https://mtl.how/fidelity 8.11 Purchase through ReqLogic Value Stream: Operations Work Stream: PeopleOps Workflow: for purchasing team equipment through ReqLogic Video Teams Channel Link Confirm with PI which grant is being used for purchasing or reimbursement. Save invoices and forms in Team PSD Shared Drive &gt; pavir_expenses. For PAVIR to purchase: Sign into ReqLogic to start a new requisition (login details in Team PSD Shared Drive &gt; Vendors). Email to notify Puchasing@pavir.org (Luanne Scott and Anna Sasamoto) with the Requisition number. For Reimbursement: Fill out a Check Request form. Email the Check Request form and the paid invoice to Payables@pavir.org (Sarah Wong). 8.12 Coordinate ILEAD Live Team Meeting Accreditation and Attendance Value Stream: Operations Workstream: PeopleOps Workflow: for coordinating with ILEAD to accredit live team meeting dates/times and grant attendees Continuing Education Units (CEUs) Video Teams Channel Link Email Joseph Bloomquist (Joseph.Bloomquist@va.gov) through MTL Help inbox to accredit Live Team meeting dates and grant CEUs based on attendance. Include session number, dates/times, and course code number. Example: MTL Blue Session Course Codes + Example Dates/Time: Session 1 (44112): 7/7 - 2-3pm Eastern Session 2 (44150): 7/21 - 2-3pm Eastern Session 3 (44532): 8/4 - 2-3pm Eastern Session 4 (44656): 8/18 - 2-3pm Eastern Session 5 (44533): 9/1 - 2-3pm Eastern Session 6 (44534): 9/15 - 2-3pm Eastern Session 7 (44657): 10/6 - 2-3pm Eastern Session 8 (44535): 10/20 - 2-3pm Eastern Session 9 (44658): 11/3 - 2-3pm Eastern Session 10 (44654): 11/17 - 2-3pm Eastern Session 11 (44531): 12/1 - 2-3pmcEastern Session 12 (44655): 12/15 - 2-3pm Eastern Example: MTL Red Session Course Codes + Example Dates/Times Red Part I / Session 1-6 (131002424): 12/1 - 2-3pm Eastern Red Part II / Session 7-12 (131002425): 12/15 - 2-3pm Eastern Email Spencer Glipa (Spencer.Glipa@va.gov) through MTL Help to “register and confirm attendance for CEU/CMEs” (use the quoted exact language) after a Live Team meeting. Include Session number, course code #, date/time, and list of attendees’ emails. Ask Spencer to provide a screenshot of the list after he “registers and confirms the attendance”. Double-check to see if all attendees are listed. Add the screenshot in the Files tab of your Team’s channel. Example using MTL Blue Session 1 + Attendees: Session 1 (44112): 7/7 - 2-3pm Eastern [VA email here] [VA email here] etc. Note: Use this TMS link to check for live meeting accreditation using course code. 8.13 Coordinate All Hands 8.14 Coordinate Non-research External Partners MITRE - Fina Lloyd 8.15 Orient Team Members to Documentation Needs Using The Document Archive mtl.how/documents "],["9-co-coordinated-workstreams-dataops-peopleops.html", "Chapter 9 Co-coordinated Workstreams (DataOps, PeopleOps) 9.1 Specific Workflows 9.2 Team PSD 2.0 Monthly Process 9.3 Test a New Modeling to Learn Release", " Chapter 9 Co-coordinated Workstreams (DataOps, PeopleOps) 9.1 Specific Workflows support_workflow: This coordinated workflow of both quant_workflow and sim_ui_workflow is in support of development and operations value streams. Coordinated by DataOps. sim_ui_workflow: This workflow provides design, maintenance, and operational support of the MTL Simulation User Interface (Sim UI) in support of development and operations. Coordinated by DataOps. consult_workflow: VACO OMHSP Facilitators of the NIH &amp; VA cluster randomized trials. Supports the research and operations value streams. Coordinated by PeopleOps. 9.2 Team PSD 2.0 Monthly Process As Team PSD continues to grow, our workflow alongside team values in order to better support the needs of our team, just like how we developed Modeling to Learn to scale nationally in the Veterans Health Administration. The participatory learning principles we scaled in Modeling to Learn are: equitable access to resources mutual learning shared decision-making Team PSD 2.0 is about becoming more scalable due to continuous integration, deployment and documention. We aim for a completely free, accessible, transparent and reproducible workflow (aka “open science”). Our mission to improve how healthcare quality improvement decisions are made enlists diverse team members and partners. We want to empower effective contributions from all potential stakeholders. The Team PSD 2.0 Monthly Process is based on the design thinking principles of user experience, which attemps to account for a person’s needs, pain points, goals, and emotional experience when using a product/service and/or going through a process and system. Team PSD 2.0 Process for monthly sprints/epics: Week 1: Gather user-centered hypotheses Week 2: Clarify user assumptions w/ Minimum Viable Product (MVP) test Week 3: Review results of user persona testing of your MVP Prototype (with concurrent video and retrospective verbal) Week 4: Review user persona artifacts and second story perspectives mindfully and empathically to discover new understandings you might have missed or still need to learn Our monthly process for each monthly sprint/epic is based on the process for design thinking: 9.2.1 Week 1: Gather User Hypotheses In week 1, we want to gather the user centered hypotheses of the user/user group that we want to help and design for either by meeting with them and/or referring to their user personas. Hypotheses should consist of the user’s needs, pain points, and consider the background and context of the user. Week 1 follows the first phase of the process for design thinking which involves the ability to empathize with the user’s current state of experience. Empathize - To gain an empathic understanding of the need or problem you are trying to solve in terms of people, processes that set aside individual assumptions to get insight into the need. What? Details of what to do (what happened). This is when we analyze observe and document details that relate to users. How? How the person does it (effort, etc.) Why? Motivations/purpose (test this out…) Exercises for assumptions (remember: everything is a perspective): List assumptions Ask: How could this not be true? Ask: What if we could do this twice as well in half the time? Example of a User Persona: 9.2.2 Week 2: Clarify User Assumptions w/ MVP test In week 2, we want to narrow down the week 1 user centered hypotheses by clarifying assumptions based on those hypotheses. Assumptions the designer has based on week 1 hypotheses should clarified to define only the most crucial and necessary needs and pain points that will be addressed before prototyping a minimum viable product (MVP). This will prevent creating/designing for needs that do not solve 80% of the user’s pain points with only 20% effort being used in the development of the MVP and test and quickly rule out MVPs that do not respond to needs of the users in a fast and cheap manner. Week 2 follows the 2nd phase of the process for design thinking which involves the ability to define with the user’s specific set of problems that needs to be immediately addressed. Define the problem - This is when we synthesize observations into holistic point of view (POV). Goal is to make linkages, so that we define the right problem to address. [Example POV: Busy, nationally distributed, cross-functional team of scientists has many partners, is about to hire more people, leads a national participatory system dynamics simulation learning program in, and is gaining increasing national and international interest in partnership HMW…] 2a. A problem statement: Focuses on Specific peopleʼs needs (not the technology or specs), Value and insights for the project (not the technical requirements), yet it is… …narrow enough to be managed within our constraints Exercises for definitions with how-why/why-how laddering (a variant of 5 whys principle): Asking “Why?” Explores to understand root causes (abstract, more common across people) …then “How might we?” to get to a specific problem/challenge we can solve (concrete) Part I - The HMW Brainstorm…HMW use the efficiency of GitHub [good] remove the [bad] steep learning curve integrate with existing GH norms the best part [explore the opposite] remove reliance on training [question the assumption] go after adjectives [make it easy, instead of hard] use code instead of by hand [leverage unexpected resource] enable self-directed learning like “Googling” [analogy from need/context] attract help from Forio, MITRE, VA to solve this [shift POV against the challenge] get it up and running now [shift a status quo] divvy up chunks for each workgroup [break up POV] Part II “Why do we need to integrate our manuals, workflows and processes on GitHub to achieve Team PSD values? (if start with Why, phrase as a need and make it meaningful.” Because… “How do we use manuals, workflows and process on GitHub now?” [describe] “Why?” “Why?” What what was most surprising? What would we have missed if we hadnʼt asked why? 9.3 Test a New Modeling to Learn Release Value Stream: Development, Operations Workstream: Co-coordinated by DataDevOps &amp; PeopleOps Workflow: facilitate_workflow, support_workflow Video: TBP Teams Channel Link Create a TEST branch off the Master branch in production. Coordinate with PeopleOps to identify the MTL Red &amp; Blue TEST teams. DataDevOps works with PeopleOps to document the new release features and conduct User Acceptance Testing (UAT or “TEST”) with facilitators/learners. TEST on lzim/mtl will be our slow TEST condition for new releases. - TEST does need to be current w/Master, so we will create a fresh TEST branch when we begin a TEST condition for a new release. - TEST will be where the health equity module and other new release work for MTL 4.0 will be tested with TEST teams. Note this is distinct from QA on lzim/mtl which is our fast quality assurance process to the master branch. In week 3, we want to share our MVPs with the user to collect user feedback. To collect feedback, users will be participating in 2 Think Aloud protocols: Concurrent Screencast Video (no audio) and Retrospective Verbal. A Concurrent Screencast Video Think Aloud requires users to screencast themselves going through the MVP prototype, but without audio so they can focus solely on using the MVP. A Retrospective Verbal Think Aloud occurs after the Concurrent Screencast Video Think Aloud in which users think about how they felt about the MVP, what went wrong, what went right, what was missing, etc and write it up afterwards. These 2 Think Aloud protocols allows us to leverage both the pros and cons of a Concurrent and Retrospective Think Aloud in which: the Concurrent provides an undisturbed recording of the user going through the MVP. the Retrospective allows the users to verbalize their thoughts, emotions, and feelings about the MVP. Week 3 follows the 3rd and 4th phases of the process for design thinking which involves the ability to ideate MVPs based on the needs and assumptions of the users and get user feedback on a prototype MVP that will solve 80% of the user’s pain points and needs with only 20% effort. Ideate - Expand the problem space by identifying and testing out elements that would circumvent problems. time-limit quantity over quality no distractions no bad ideas Prototype - inexpensive, scaled down version with the key features to investigate the problem and solution. Goal is to identify the best possible solution. Solutions are investigated, accepted, improved, re-examined, rejected based on user-experiences. Should give much better sense sense of constraints and how users would behave, think, and feels when interaction with it. "],["10-continuous-integrationcontinuous-deployment-cicd-for-system-dynamics-model-files.html", "Chapter 10 Continuous Integration/Continuous Deployment (CI/CD) for System Dynamics Model Files 10.1 Upload data to the SIM UI 10.2 Week 4: Review Second Story Perspectives", " Chapter 10 Continuous Integration/Continuous Deployment (CI/CD) for System Dynamics Model Files 10.1 Upload data to the SIM UI Value Streams: Operations, Development Workstream: DataOps Workflows: sim_ui_workflow, training_workflow Video Teams Channel Link Find the instructions. Navigate to the appropriate Sim UI team and world. Upload data. 10.1.1 Create Screencast Video 10.1.1.1 Instructions Make user-persona Concurrent Think Aloud videos testing Team PSD prototypes (aka MVPs: ‘minimum viable products’). 10.1.1.2 Context - Why this is critical for Team PSD 2.0 to scale? To scale Team PSD processes, we evaluate the usability and user experience of Team PSD prototypes. Passive Screen Video Observation Usability (quantitative MVP tests) This test is the concurrent think aloud protocol to detect problems with MVP assumptions. Prototype developers gain re-susable insights into the users (through the library). Users don’t have to think about producing these scalable artifacts (just upload). These files are named with this convention “date_skill_training_user” e.g., “2020_05_13_git_ch1_busy_pi” Verbalization User-experience (qualitative MVP tests) This test is the retrospective think aloud protocol to detect problems with MVP assumptions. Learning task performance. We need distributed Team PSD users to learn at scale. All prototypes are teaching our learners a skill they need to contribute to the team. As we upskill, we continuously integrate prototypes, which scales learning and improvement across Team PSD. 10.1.1.3 Record Screen (No Audio) 10.1.1.4 PC User (VA or Non-VA) 10.1.1.5 Non-VA, Windows 10 users only: Record screen using Game DVR The Game DVR feature can capture any application’s window. Press Windows + G in any application on Windows 10. Look for the Game Bar that will appear. Select “Yes, this is a game” even if the application isn’t a game. Reminder: Protect your privacy and only include information that is relevant for Team PSD prototyping. 10.1.1.6 VA or Non-VA: Record screen using PowerPoint Powerpoint can has a built-in ability to screencast your desktop and input the video onto a slide in blank powerpoint presentation. You can save the video file separately afterwards. Follow the guide here. Follow steps 1-6 under the header: Record from your computer screen and embed the recording in PowerPoint. VA Machine User: Your PowerPoint Version on your VA machine will be able to screencast with the instructions in the guide above. Non-VA Machine User: Be sure to check your PowerPoint versions as this only works in PowerPoint for Microsoft 365, PowerPoint 2019, PowerPoint 2016, PowerPoint 2013. Reminder: Protect your privacy and only include information that is relevant for Team PSD prototyping. 10.1.1.7 Mac User (Usually Non-VA) 10.1.1.8 Record any window on your Mac. Press Shift-Command-5. The Onscreen Controls will appear. Once the Onscreen Controls appear, click on one of the buttons with the record circle in the bottom right (4th icon from the left - Record Entire Screen or 5th icon from the left - Record Selected Portion) Click the down arrow under Options, located next to the record button. Under Microphone, select none to turn off audio recording. Under Options in the Onscreen Controls, adjust the recording window, setup a Timer, and where to Save To your recording. In the Menu Bar, click the Stop Recording button or press Command-Control-Esc (Escape) to stop recording. Reminder: Protect your privacy and only include information that is relevant for Team PSD prototyping. Reference: van den Haak, Maaike, De Jon, Menno, Schellens, &amp; Peter Jan. (2003). Retrospective vs. concurrent think-aloud protocols: Testing the usability of an online library catalogue. Behavior &amp; Information Technology, 22. https://doi.org/10.1080/0044929031000 10.1.2 Upload Screencast Video 10.1.2.1 Instructions Post user persona Concurrent Think Aloud videos testing Team PSD prototypes (aka MVPs: ‘minimum viable products’) to YouTube. 10.1.2.2 1. Create a Google Account If you don’t already have a gmail/Google account, select this link to create a Google account. https://accounts.google.com/SignUpWithoutGmail A Gmail is not required to sign up. This email is only used to login and will not be public. Uploaded user persona videos will be posted under the Brand Account LZPhD. 10.1.2.3 2. Share Email with Brand Account Manager Share the email associated with your Google account with a brand account manager to process an invitation. A brand account manager is any manager that already has access to the YouTube channel. Communicate through Microsoft Teams. 10.1.2.4 3. Manage YouTube Invitation Login to your Google account Select this link https://myaccount.google.com/brandaccounts Click Pending invitations. Select LZPhD. Accept invitation. Scroll down: “Act as LZPhD on”: Select the YouTube red icon. Navigate to the inbox associated with your Google account. You will see a confirmation in your inbox that reads, “You are now a manager of LZPhD”. Select the new email. You are now a manager Congratulations! 10.1.2.5 4. Upload User Persona Video Select Get started. Select the YouTube red icon. Your YouTube dashboard will open up. Navigate to the top right and select your circular profile pic. From the drop-down menu, select switch accounts. Select LZPhD. On the top right, Select the video camera + icon (Create). Select Upload video. Find the user persona video file you’d like to upload. 10.1.2.6 5. Convention for Video Details During Upload Use this naming convention “date_skill_training_user” ex: “2020_05_13_git_ch1_busy_pi” A description is not necessary at this time. No playlist. Audience Select, Yes, it is made for kids. This will remove any advertisements. Click Next advance to next screen Click Next, no video elements at this time. Visibility Select Unlisted only people with the link can see it. Click Save and your video will continue processing. You can safely logout of YouTube when your screencast is fully uploaded. 10.1.2.7 6. Speed Up or Slow Down YouTube Viewing While viewing your user persona video in YouTube, click the gear icon located on the bottom right. Select the “Speed” option. Choose a range of speeds. 10.2 Week 4: Review Second Story Perspectives In week 4, your prototype and MVPs should be able to be fully incorporated into Team PSD’s workflow as we do NOT want to spend time developing solutions that do not solve 80% of our team’s needs and utilizing only 20% effort in order to fail fast and fail cheap by quickly ruling out assumptions and solutions that do not work. Week 4 follows the last phase of the process for design thinking which involves the ability to review tests of your MVP and reflect on those tests that can help you even better mindfully and empathize with users, ultimately to further improve your skills for month’s design process. Test - Review tests your prototype with the user personas in question &amp; look for 2nd story perspectives. Does the prototype address the personas needs and pain points? What could we have missed or ignored from the user? What worked well in the month and what did not? 10.2.1 Reflect Second Stories Use these set of question to help think through Second Story Perspective Questions to reflect on the design process from the month: Do you see any places where moving forward independently could have been more aligned with the team or integrated better when you were done? Could a dependency or root assumption have been caught any sooner for the benefit of the team? Have you discovered a new empathic understanding of the situation from another users’ POV (point of view)? "],["11-va-citrix.html", "Chapter 11 VA Citrix 11.1 Download Citrix 11.2 Access Remote Desktops", " Chapter 11 VA Citrix 11.1 Download Citrix You must first download the correct Citrix Access Gateway (CAG) software client based on your operating system (Windows or Mac). 11.2 Access Remote Desktops Once you have downloaded the correct software, use your PIV Card to access the CAG URL at: https://citrixaccess.va.gov/ Tip: Bookmark the URL for convenience. 11.2.1 Window Users Follow the starter guide here: https://www.oit.va.gov/resources/remote-access/cag/windows/ 11.2.2 Mac Users Follow the starter guide here: https://www.oit.va.gov/resources/remote-access/cag/mac/ 11.2.3 Remote Desktops Once you have gotten access through the CAG URL, navigate to the Desktops tab to view all your options. The V21-Speciality Desktop tends to be faster** and more up to date** than the 1VA-General Desktop. Tip: Click on star icon in by the V21-Speciality Desktop icon. This will make the desktop appear on your Home page tab so you don’t have to navigate to the Desktop tab everytime you sign into Citrix. "],["12-ms-teams.html", "Chapter 12 MS Teams 12.1 Quick Start Guide 12.2 Flow Map 12.3 Additional Tips/Functions", " Chapter 12 MS Teams TeamPSD and the VA are both using Microsoft Teams as their main communication and scheduling platform. 12.1 Quick Start Guide To review the basics of Microsoft Teams, check out their Quick Start Guide. This guide will help you learn the basic user interface functions of Microsoft Teams such as: Signing In Manage your profile settings Create &amp; choose/browse channels Start a meeting or call Start a new conversation thread Reply within a message/conversation thread @ Mention someone Start a 1:1 or small group chat Add/Share/Work with Files and more! 12.2 Flow Map 12.2.1 Switch Organizations/Add VA Account 12.2.2 Create a VA Teams meeting from your Personal Email Account 12.2.3 Create a VA Teams meeting from the shared MTL Help or MTL Info Email Accounts This is a work-around solution for creating meetings that ensures a meeting series comes from the MTL Help or MTL Info shared inboxes, but also includes 12.2.4 Participate in a Meeting Note: VA Citrix Users do not have access for computer audio or webcam from the Teams WebApp, but can join by calling in from their cell phone or join the meeting from outside the VA with the meeting link. 12.3 Additional Tips/Functions 12.3.1 VA Teams WebApp Browser: Click on the Teams WebApp shortcut on your CITRIX remote log-in desktop to access the browser version as CITRIX does not have the desktop version installed. If you do not see the WebApp shortcut, open Google Chrome and type in teams.microsoft.com to access it manually. 12.3.2 Switch Organizations To switch out of an organization on the VA Teams WebApp Browser: Click on the organization you are currently in, located next your profile picture &amp; name. To switch out of the organization, click on the organization you want to switch into. To switch out of an organization on the Non-VA Teams Desktop: You must sign out and re-login into the Desktop App by going to your Profile and signing out: You will be given the option of choosing an organization to sign into, click on the drop down to select an option. Click ‘continue’ and Teams will switch you into the chosen organization: 12.3.3 Meet in a Channel To know where a meeting call is being held in a channel: Look to see the purple video icon next to a channel’s name. 12.3.4 Edit Message/Reply To edit a message: Drag your cursor over to an existing comment and click on the 3 dots next to the 6 “react” emojis. Select the pencil icon Edit button. After finishing your edit, select the check mark button to publish or the “x button” to exit out of the draft. 12.3.5 Type in Markdown Teams is Markdown friendly! Try using basic markdown such as bolding or italicizing text in a comment/reply. 12.3.6 Start a Call in a Thread To start a meeting call within the same conversation thread to keep context: In the conversation thread, click on the reply button. Click on the video icon button to begin a call. 12.3.7 Record a Meeting To record a meeting or call: Within the meeting/call, click on the 3 dots […] in the middle navigation bar and select “Start recording”. The following will occur to indicate that you are recording: A disclaimer will pop-up at the top of the meeting for everyone. A red circle will appear next to the meeting timer in the navigation bar. When you are done with the meeting/call, click on the 3 dots […] in the middle navigation bar and select “Stop recording”. The recording will need time to upload and render (e.g 50 min recording took about 2-3 min). Once finished, the video will automatically populate in the meeting’s Chat thread. 12.3.8 Share Dual Screens To share multiple browser windows or screens: Click on the screen share button that appears when you hover over your meeting call screen: Select the square underneath Desktop to share your entire laptop’s Desktop screen. Note: Be wary of any open tabs or browsers you may have open that may contain PHI or personal information that you do not want to share. You will notice a subtle red border outlining your entire desktop screen. The red border is only visible to you and not anyone else, hence not pictured here. TIP: Queue up the window you want to share in advance. I had already queued up my Google Chrome Browser in the background, which is now being shared as the default of entire desktop screen. Drag in other window/browsers within the red border to show dual screens. Here I am showing Google Chrome and Teams: End screen sharing by going back to the meeting and clicking on the screen sharing button. 12.3.9 Disappeared Meeting To find a meeting call’s screen once you’ve clicked out of the meeting to look elsewhere on Teams (i.e., you needed to respond to a ping, when to look for a link in a discussion thread, etc.): Minimize the Teams browser completely by clicking on the middle (-) button at the top header of the browser: Go to a new browser or your desktop and the meeting call should appear in the bottom right hand corner: Alternative (only applicable to Channel Meetings, not Private 1:1 meetings): If you remember which Channel the meeting call was in, you can click back into the meeting by ‘Joining’ in again, this will not show you joining twice as you are just re-joining. 12.3.10 “React” to a Comment To “React” to a comment or reply to acknowledge it: Drag your cursor over to an existing comment and select 1 of the 6 emojis to “react” to it. 12.3.11 Link a Comment/Discussion/File To link to a specific thread or comment or file: Drag your cursor over to an existing comment and click on the 3 dots next to the 6 “react” emojis. Click on hyperlink icon copy link button to copy the link to the location of that thread/comment/file. 12.3.12 Pop up Chat Hover over a meeting chat in the Chat tab and click on the 3 dots that appear. Click ’Pop out Chat” for the chat to display and external new window. "],["13-instructions-to-authors.html", "Chapter 13 Instructions to Authors 13.1 Team PSD Authorship 13.2 Access the Authorship APP 13.3 Track Completion and Contributions 13.4 Add Co-authors 13.5 View Progress 13.6 Use Open Science framework (see below) 13.7 Use Lucid Charts for Figures and Tables 13.8 Use the Manuscript Tracker in GitHub 13.9 Open Science Framework 13.10 Cheatsheet", " Chapter 13 Instructions to Authors We use several platforms to ensure co-authors can easily track the progress of a manuscript, communicate about next steps, and seamlessly co-write asynchronously. Before diving in, please check out the flow charts below on how to contribute based on your role. Please review the section below on how we use the Open Science Framework to manage our manuscript development. Make a manuscript contribution workflow 13.1 Team PSD Authorship Value Streams: All Workstreams: All Workflows: Cross-cutting Teams Channel Link Standing Office Hours: #manuscript_monday 12:30-1:30 p.m. PT (3:30-4:30 p.m. ET) https://mtl.how/manuscripts is the tracker/Kanban for manuscript submission. https://mtl.how/osf is the registry/platform for developing manuscripts and making data available per NIH requirements. https://mtl.how/authorship is the R Shiny Application we developed for determining authorship based on a) prior_work using developers categories or b) writing using the International Committee of Medical Journal Editors (ICMJE) &amp; American Psychological Association (APA) guidelines. 13.2 Access the Authorship APP mtl.how/authorship We use the Authorship App to ensure a fair &amp; transparent process for assigning authorship order. The app tracks what work has already been done, who has made intellectual contributions &amp; in what subcategories, and how to divvy up the remaining work. You will receive an email from the TeamPSD Shiny Server, giving you access to the authorship app. If you do not have this email, please email mtl.info@va.gov and request access. Once you get the email granting access, click on the link within the email. This will take you to the page below. Click on “Login”. This will open up the Login/Sign Up pop-up below. You can either use an existing Google/GitHub account to login or sign up for an account. In the future, you can go directly to the mtl.how/authorship_app and login from there. Once your computer starts to cache your login info, you may be able to skip the login step altogether. 13.3 Track Completion and Contributions Co-authors can use the app asynchronously to provide: How much prior work (or intellectual contributions) for a manuscript have already been completed: What percentage of the manuscript is based on work previously done vs. writing and analyzing that is still left to be done? Prior work contributions made by each co-author: What intellectual contributions have you made to the topic of this manuscript and which TeamPSD workgroups do those contributions fall under? Who are the other co-authors that worked on those contributions with you? 13.4 Add Co-authors With the co-authors on your manuscript decide and add to the app: Based on the prior work weights averaged across all the co-authors provided input, how will we divvy up the remaining writing, editing, and analysis? 13.5 View Progress As you fill out the weights for a manuscript, a series of pie charts will show the division of contributions for that manuscript to help you work already assigned, authorship order, and work to be assigned. 13.6 Use Open Science framework (see below) We use the Open Science Framework to co-write the manuscripts asynchronously with built-in version control for tracking changes. Make sure you can log into mtl.how/osf. If you don’t have an account, please create one. Reference instructions on how to use the OSF in the TeamPSD Manual. 13.7 Use Lucid Charts for Figures and Tables TeamPSD pays for an organizational account with LucidCharts, which allows us to track version history and communicate asynchronously on documents. Please email mtl.info@va.gov with your preferred (VA or non-VA) email address to use with LucidCharts. Once you are added, you will get an email that walks you through the rest of the sign-up process. 13.8 Use the Manuscript Tracker in GitHub If you are creating a new account or re-activating an old one, please send your username to mtl.info@va.gov, to be added to our TeamPSD repository. Once you are added, you will get a second email asking you to confirm this change. Read more about the manuscript tracker in the TeamPSD manual TeamPSD Manual. Note: GitHub is a public platform. Maintain standard VA compliance guidance and do not post any PHI/PII. Do not post any direct manuscript content including drafts, figures, etc. 13.9 Open Science Framework Team PSD is using Open Science Framework (OSF) to work on drafts and related manuscript materials. OSF also shares the same values of supporting open-source, transparency, and a reproducible workflow just like Team PSD. 13.10 Cheatsheet "],["14-lucidcharts-1.html", "Chapter 14 Lucidcharts 14.1 Organizational Account Setup &amp; Sharing Permissions 14.2 Organizational Account Admin 14.3 Create a Flow Map 14.4 Post on GitHub", " Chapter 14 Lucidcharts 14.1 Organizational Account Setup &amp; Sharing Permissions Email Stacey Park or Jenn Li with your preferred email address to use with Lucid. Once they add you to the TeamPSD Lucidchart Org Account, you will get an email invitation. Open the email invitation and follow the steps through to finish setting up your account &amp; password. If you are creating a new document within an existing TeamPSD folder, then it will inherit the share permissions of that folder (i.e. for existing TeamPSD folders, the permissions should already be correct, and any new documents will inherit those share permissions). If you are creating a new document outside of an existing TeamPSD folder or creating a new folder, make sure to share it with the correct groups to ensure everyone can see it. Hover over the document or folder and click “Share.” In the dropdown with the person &amp; pencil icon, make sure the “Edit &amp; Share” permissions are selected. Start typing the name of the group you want to share to: all_teampsd = all TeamPSD members &amp; partners mtl_teampsd = core TeamPSD members that are active in workgroups mtl_hawaii = MTL Hawaii partners heal = team members who contributed to writing and developing the HEAL grant Click on “Advanced.” Uncheck “Notify via Email.” Then, click “Share” and “Done.” 14.2 Organizational Account Admin Once a team member sends you their email address, a Team Admin or Account Owner needs to add them to the organizational account. On the top right hand corner, click on your photo. Then, click on “Account Settings.” You will be taken to your Account page. Click on “Admin.” Click on “Users.” On the top right hand corner, click on “Add Users” &gt; “Add a Single User.” Add the email address and “Invite to Team.” This will send an invitation to their email with instructions for setting up an account. Once they accept the invite and setup their account, you will see their name in the list of users. Click on a user’s name and a pop-up will appear on the right hand side. Click on “Edit” next to “Roles” (go to #7) or “Teams &amp; Groups” (go to #8). Check the boxes next to “Billing Admin Privileges” or “Team Admin Privileges” as needed. Then, click “Confirm.” For regular users, no action is needed here. Hover over a permissions group and click on the plus sign to add it to the right hand “Selected Groups” column. Then, click “Confirm.” 14.3 Create a Flow Map Click to view the standard Team PSD flow map: Create a Team PSD Style Flow Map on Lucidchart. 14.4 Post on GitHub Create a published link to your flow map and add the link to any issue or pull request to post a preview of your map. "],["15-github-zenhub.html", "Chapter 15 GitHub + ZenHub 15.1 GitHub Repositories", " Chapter 15 GitHub + ZenHub TeamPSD’s main platform for project tracking is GitHub + the extension of ZenHub for project management. 15.1 GitHub Repositories 15.1.1 Workflow 15.1.2 Non-VA Repositories lzim/teampsd (Public) This repository contains TeamPSD resources and track the work that the team uses internally (i.e. Bookdown, document_team, depend_products, etc.) lzim/mtl (Public) This repository supports Modeling to Learn and contain the content in describe_learners, detail facilitators, and SIM/Model Code. lzim/sim (Public) This repository supports the Modeling to Learn Simulation User Interface platform, Forio Epicenter, &amp; and model files from Vensim DSS. lzim/research (Private) This repository holds the analysis for the (R01, IIR, R21) and disseminate science. lzim/mtl_team_tracker (Private) This repository is used by VA Clinicians and Modeling to Learn Co-facilitators to track team progression. 15.1.3 VA Enterprise Repositories “va/mtl” (operations pipeline) This repository stores the operations code used to support Modeling to Learn teams. “va/research” (research pipeline) This repository holds the backend code that needs to stay internal for our grants. "],["16-manage-with-zenhub.html", "Chapter 16 Manage with ZenHub 16.1 Enable ZenHub within GitHub 16.2 View Roadmap + Epics 16.3 Add Epics to Issues 16.4 Define Workspaces 16.5 Add Dependencies 16.6 Estimate Issues 16.7 9 Clicks for Issues 16.8 Manage Workgroup Workflows 16.9 Filter Workspace 16.10 Track Notifications 16.11 Create &amp; Manage Issues 16.12 View Reports 16.13 Test First Epic (go_live)", " Chapter 16 Manage with ZenHub Team PSD uses the GitHub Google Chrome extension, ZenHub, for agile project management. We use ZenHub to: see all of our Team PSD’s workflow at a glance. organize and prioritize existing issues and features. track dependencies across workgroups. plan for our month’s work in a Epic and plan for further Epics down the road. 16.1 Enable ZenHub within GitHub Click here for the ZenHub Google Chrome extension. 16.2 View Roadmap + Epics 16.3 Add Epics to Issues 16.4 Define Workspaces 16.5 Add Dependencies 16.6 Estimate Issues 16.7 9 Clicks for Issues 16.8 Manage Workgroup Workflows 16.9 Filter Workspace 16.10 Track Notifications 16.11 Create &amp; Manage Issues 16.12 View Reports 16.13 Test First Epic (go_live) "],["17-track-issues-bugs-features.html", "Chapter 17 Track Issues, Bugs, &amp; Features 17.1 Report a Bug via GitHub to Improve Modeling to Learn Resource 17.2 Create Issue/Feature cards [click maps in progress] 17.3 Maintaining Cards [flow map in progress] 17.4 Use Markdown 17.5 Use GitHub Branches 17.6 Submit a Feature 17.7 Run Quality Assurance 17.8 Use a “Find and Replace” Branch 17.9 Update a Bookdown File Using the “gh-pages” Branch 17.10 Update a Model File Using the Dev, Test and Master Branches 17.11 Contribute to an R Notebook 17.12 Reviewing pull requests", " Chapter 17 Track Issues, Bugs, &amp; Features 17.1 Report a Bug via GitHub to Improve Modeling to Learn Resource Value Stream: Operations Workstream: Workflows: consult_workflow, training_workflow, support_workflow Video: TBP Teams Channel Link The process for submitting a Bug through the Bug Tracker to improve MTL resource: Navigate to https://mtl.how/bugs. All bugs begin in the needs_triage swim lane. Click on Issues at the top navigation bar. Click on the green New issue button. Click on the green Get started button in the same row as Issue to create a new issue (bug). A template will appear that shows what kind of information is needed. Delete the templated information and replace it with the information for your bug. Use the mtl.help@va.gov shared calendar to let the support_workflow Team know (this keeps teams de-identified on the internet). Provide meeting info when bug was caught and who you were with so support_workflow Team can follow up. On the right-hand panel, click Projects and select “bug_tracker”. Reminder: Do NOT place any PHI or MTL Team data on the bug (e.g., if a screenshot is provided, black out any Team or PHI data). Use the Inspector Console to add technical information for support_workflow (Shift + Ctrl + I) or right-click “select inspect”. If you see something that could lead to a decrease in quality, please label it andon (from Lean): we will Scope (S), Alert (A), and Communicate (C). Click the green Submit new issue button. 17.2 Create Issue/Feature cards [click maps in progress] Click map would explain process here 17.3 Maintaining Cards [flow map in progress] Flow map to maintain your issue/features cards as they get worked on. We will wait for these flow maps until Branching MVP is tested: [Track a bug] might change [Track a feature] might change. Previous Issue Card Flow Map: 17.4 Use Markdown 17.4.1 Write Markdown Cheatsheet will go here 17.4.2 Use Markdown Files 17.4.2.1 Add a Markdown File 17.4.2.2 Go to a Markdown File 17.4.2.3 Edit a Markdown File 17.5 Use GitHub Branches Use GitHub Branches Workflow GitHub branches are used to provide continuous integration of multiple versions of a repository. Branches also control versions of a file and trigger automatic review and quality control actions to ensure files meet team standards. See Working with Branches for more information. 17.6 Submit a Feature No direct-to-master branch commits are allowed. A feature branch will merge with the Quality Assurance (QA) branch before being pushed to Master. The QA branch is a protected branch that requires mandatory reviews before changes can be merged with Master. In extremis and with approval, a feature branch may be directly pushed to the Master branch in circumstances where the QA branch is tied up with another feature branch. 17.6.1 Create a Feature Branch fig1_create_branch With the “&lt;&gt; Code” tab selected, click the button named “master” in the upper left of the directory. A dropdown will appear with a listing of all branches currently active in the repository. A check indicates the branch that is active. In the “Find or create a branch . . . “ field, enter the name of your branch using this format: “feature-my_new_branch”. The word “feature” will trigger automatic workflows when you commit the branch. Use lowercase letters and an underscore “_” between words. After the word “feature” provide up to a 4-word short description of what the feature addresses. When the “Commit” button is clicked, the word “feature” will trigger automatic quality control actions. The results of these actions can be reviewed in the actions tab of GitHub. 17.6.2 Edit a Feature Branch To edit a feature branch, navigate to the “&lt;&gt; Code” tab and click the button named “master” in the upper left of the directory. A dropdown will appear with a listing of all branches in the repository. Click on the desired feature branch in the list. Navigate to the target file from the directory. Edit the target file within this branch. When edit is complete, commit the file back to this feature branch. The commit will trigger quality control actions that can be reviewed in the actions tab. 17.6.3 Push a Feature Branch fig2_new_pull_req To push an updated file or files from a feature branch to the QA branch, the user must open a Pull Request. Note: Opening a pull request can be done when a file is committed to a branch using the commit dialogue, or the user can navigate to the “Pull requests” tab. Navigate to the “Pull requests” tab. Click the green “New pull request” button on the right-hand side of the page. Review the “Comparing changes” dialogue very carefully (see image below). Ensure the base branch indicates “QA.” If it does not, click on the button and select correct branch. Ensure the pushed branch is the desired feature branch. fig3_compare_changes 17.7 Run Quality Assurance fig4_rerun_quality assurance The QA branch is a protected branch, which means it cannot complete the merge unless all conflicts and errors are cleared and the assigned reviewers have signed off on the changes. When a feature branch is pushed to the QA branch, quality assurance actions will automatically run and list out any findings under the Actions tab. The user checks for errors in this tab, and corrects any findings. The user can re-run the quality checks from the actions tab by clicking the “Rerun jobs” button on right hand side of screen (see figure above). 17.8 Use a “Find and Replace” Branch GitHub FNR feature branch is a specialty branch that is used to find desired words or short strings and replace them automatically throughout documents in the repository. The FNR action can be limited to a file, a director or the whole repository by modifying instructions in the FindReplace.yml file found in the .github/workflows directory. 17.8.1 Configure the FindReplace.yml Action File Below is an explanation on how to configure the find and replace function. Configure the FindReplace.yml Action File Select the FindReplace.yml file and place in “edit” mode. Update line 53 with the desired word, acronym or string within in the quotation marks. PRO TIP: Do not leave extra spaces before or after words, unless you want the search to include the space immediately before or after a search string. For example, the search term “Session 1” will find “Session 1”, “Session 10” and all instances where the number “1” is found, even if it is in the number “10.” To limit the search, place a space immediately after the “1” like this “Session 1” and that will limit the search to “1” only. Update line 54 with the replacement term in quotation marks. To limit a search to an updated file or directory, remove the appropriate hash mark (#) from the line of code that provides the needed search constraint. Navigate to the upper left of the window and select the green “Start commit” button. Select the “Commit directly to Master branch” radio button and click the green “Commit changes” button. 17.8.2 Create a “Find and Replace” (FNR) Branch Navigate to the code tab. Click on the branch button and expose the branch dropdown menu. In the “Find or create branch” field, enter the name of your find and replace branch using this convention: fnr-findterm_replaceterm. For example, if “session 1” was the find term, and “Session X” was the replace term, it should read “fnr-session_1_session_x.” Press enter and navigate to the “Actions” tab. Here the action will report how many terms were found and replaced (see images below). For a line-by-line review of changes, open a pull request. Open action tab and review action status Open pull request comparing FNR branch to master Compare changes 17.9 Update a Bookdown File Using the “gh-pages” Branch To support the publication of a bookdown manual, a special branch is required named “gh-pages” branch. This branch contains the markdown files that are editable and are automatically compiled by an bookdown publication action, when a feature branch is merged with the gh-pages branch. Follow the steps below to edit a bookdown manual. Navigate to the “gh-pages” branch. In the “Find or create a branch” field, enter a feature branch using the following convention: feature-gh-pages_chapter_action. For example, an update to chapter 9 might look like this, “feature-gh-pages-ch9_update” This will clue reviewers that the action will merge with gh-pages after review. Navigate to the “feature-gh-pages_*” Edit the desired file. Commit the file to the same branch. Open a pull request to merge with the gh-pages branch. This will trigger the spell checker, link checker and markdown style checkers and signal reviewers that a check is needed. Navigate to the Actions tab to resolve any issues found by the linters. After review, the reviewer will merge the branches. This will trigger the bookdown publishing action to publish the updated manual. 17.10 Update a Model File Using the Dev, Test and Master Branches Please note: Vensim cannot run in actions associated with web-based GitHub. All edits and file conversions must be run on a client machine with associated license. Batch files can be run to save time, but these outputs must be produced on a licensed client and pushed to origin via a client git such as GitHub desktop. If a user desires to update a model, they must push the update in three versions, .mdl (Vensim readable format), .vmfx (Vensim binary) and .xmile (SD standard) to the DEV branch (see figure below). The push will trigger an action that will deploy the model files to their respective locations. As the model moves through development and test, the associated model files will deploy incrementally to associated Epicenter projects (i.e., Dev branch merges with the Test branch, files deploy to Epicenter test project; when the Test branch merges with Master branch, files deploy to Epicenter PROD projects). Upon merge with the Test or Master branch, the action will create a standardized .html System Dynamics Document file and deploy the file to the lzim/mtl/blue/mtl2.0_models folder. model update branch process image Navigate to the lzim/mtl Dev branch. Ensure the branch is up-to-date with the Master branch. If not, merge Master to Dev to bring it up to date. From the Dev branch, update the desired .mdl model file. This can be done on a client by modifying the cloned file on a client using a licensed copy of Vensim (recommend Vensim version 8.4). When development is complete, save .mdl, .vmfx and .xmile versions of the file. Push modified files to origin and note changes in comments field. When development activities are concluded, open a pull request to merge Dev with Test. Fix any errors and merge the two branches. Upon merge to Test, the files will be deployed to the Forio Epicenter VA Sim UI Test Slow project. Conduct user-acceptance testing. When user acceptance testing is completed, open a pull request to merge Test with Master branch. When reviewer have signed off, merge the Test branch to Master branch. When Test is merged with Master, the action will deploy .vmfx file to Forio Epicenter VA Sim UI PROD project. The action will also execute the SD-DOC program and create an SD-DOC .html file and deploy to the lzim/mtl/blue/mtl2.0_model folder. 17.11 Contribute to an R Notebook Figure 1: Workflow for Quant group R Notebook contribution quant_wg_qa_workflow.png Step 1: Under Current Repository select research. Click current branch then select New Branch github_desktop_select_repo.gif Step 2: Title your branch appropriately. Precede your branch name with grant name (e.g r21_load_r_libraries) and select Master as the base branch. quant_workflow_title_branch.gif Step 3: On the menu bar, click on the Repository and select Show in Finder (Mac) or Show in Folder (PC) click on the project folder and then R project file. github_desktop_show_in_folder.gif Step 4: To edit/add an existing code chunk, navigate to the chunk and make appropriated edits (Remember to include documentation). github_edit_code_chunk.gif Step 5: Save your work and go back to Github Desktop. Click fetch origin and commit your changes. Remember to add a title and description of your commit. A good commit title would include name of code chunk edited/added, section title of the notebook or task name (e.g edit titles, added references,… ). github_desktop_commit_changes.gif Step 6: Click Push to Origin then Create Pull Request. This will send you back to Github. github_desktop_create_pull_request.gif Step 7: Follow the steps outlined in Submit a Feature to submit your changes for review 17.12 Reviewing pull requests While reviewing the files in a pull request, you can leave individual comments on specific changes. After you finish reviewing each file, you can mark the file as viewed. This collapses the file, helping you identify the files you still need to review. A progress bar in the pull request header shows the number of files you’ve viewed. After reviewing the files you want, you will approve the pull request or request additional changes by submitting your review with a summary comment. 17.12.1 Starting a review Click Start a review. If you have already started a review, you can simply click Add review comment. Before you submit your review, your line comments are pending and only visible to you. You can edit pending comments anytime before you submit your review. To cancel a pending review, including all of its pending comments, scroll down to the end of the timeline on the Conversation tab, then click Cancel review. Cancel review button 17.12.2 Marking a file as viewed After you finish reviewing a file, you can mark the file as viewed, and the file will collapse. If the file changes after you view the file, it will be unmarked as viewed. On the right of the header of the file you’ve finished reviewing, select Viewed. 17.12.3 Submitting your review After you’ve finished reviewing all the files you want in the pull request, submit your review. Select the type of review you’d like to leave: - Select Comment to leave general feedback without explicitly approving the changes or requesting additional changes. - Select Approve to submit your feedback and approve merging the changes proposed in the pull request. - Select Request changes to submit feedback that must be addressed before the pull request can be merged. "],["18-glossary-1.html", "Chapter 18 Glossary 18.1 Terms 18.2 Acronyms", " Chapter 18 Glossary Links are in progress of being collated and added! 18.1 Terms @ Mentions: to notify a person on GitHub by using @ before their username. Users in an organization on GitHub can also be a part of a team that can be mentioned. App: Allows you to automate and improve the GitHub workflow. Team PSD can use apps to automate simple tasks and enforce standards. Application Programming Interface (API): We use APIs as a call to send data from our GitHub repository to GitHub Apps and Actions. Assignee: The member that is assigned to an issue or feature card. Branches: A branch is a parallel version of a GitHub repository. It is contained within the repository, but does not affect the primary or master branch allowing you to work freely without disrupting the “live” version. When you’ve made the changes you want to make, you can merge your branch back into the master branch to publish your changes. Bug: An existing feature that has been developed and is not working correctly and should be documented in an issue card on GitHub to be resolved. Card: A movable square within an associated and contain documentation for Issue tasks, Bugs, Features, or Pull Requests. You may see issue cards on GitHub Kanban Trackers and on the ZenHub Workspace Board. Code of conduct: A document that defines standards for how to engage in a community on GitHub. Comment: Add comments within GitHub issue cards to keep discussion going all within context. Compare branch: The branch you use to create a pull request in GitHub. This branch is compared to the base branch you choose for the pull request, and the changes are identified. When the pull request is merged, the base branch is updated with the changes from the compare branch. Also known as the “head branch” of the pull request. Concurrent Screencast Video: Screencasted videos allows for asynchronous feedback to be provided. These videos consist of users going through the MVP without audio to concurrently focus on the task of seeing/trying out the MVP and whether or not it addresses their user-centered hypotheses and pain points. Videos should be uploaded on the LZPhD YouTube channel. Continuous Deployment (CD): Automatic releases to a test or production environment if all the tests from the Continuous Integration (See Continuous Integration) process pass. Continuous Integration (CI): Practice of integrating changes “continuously”, coupled with automated testing to allow for a function and always up-to-date repository base. Continuous Learning: The Continuous Learning Culture competency describes a set of values and practices that encourage individuals—and the enterprise as a whole—to continually increase knowledge, competence, performance, and innovation. Community of Practice (COP): Communities of Practice (CoPs) are organized groups of people who have a common interest in a specific technical or business domain. They collaborate regularly to share information, improve their skills, and actively work on advancing the general knowledge of the domain. Deliverable: A product of a task or group of tasks. Design Thinking Process: Design Thinking is a customer-centric development process that creates desirable products that are profitable and sustainable over their lifecycle. The Process consists of Emphasizing, Defining, Ideating, Prototyping, and Testing (see Team PSD 2.0 Monthly Process). Dependency (Blocking/blockers): Use a blocking/blocker to add a dependency on your GitHub issue card to alert others that a task cannot be done without another task or vice versa. Documentation: Materials or descriptions that provide information about a topic. The team uses documentation to ensure that our work is transparent, reproducible, and understandable for both team members and external partners. Epic: Epics are ~1 month’s worth of sprints that go by the week. Each month is a new epic (e.g In August, our Epic is aug_epic). Estimate: Points following the Fibonacci sequence to describe the level of effort, not hours, required to complete an issue or feature. We can think of these as t-shirt sizes: Expedite: To move the priority of a bug or feature in GitHub to the top of a queue. Expediting is poison to a production system and should be used only in exigent circumstances. Feature: A characteristic, attribute or topic that requires work breakdown, research, design, development and testing. Features can be tagged as “fast_track” in order to expedite its design and development. The features documentation of requirements will be in a GitHub Feature card and placed in the appropriate feature_tracker column. Fork: A fork is a personal copy of another user’s GitHub repository that lives on your account. Forks allow you to freely make changes to a project without affecting the original upstream repository. You can also open a pull request in the upstream repository and keep your fork synced with the latest changes since both repositories are still connected. Git: Git is an open source program for tracking changes in text files. It was written by the author of the Linux operating system, and is the core technology that GitHub, the social and user interface, is built on top of. GitHub: Team PSD’s main platform to track work from each Team PSD Workflow (Research, Operations, and Modeling to Learn) based on GitHub repositories. GitHub Actions: GitHub Actions help automate repository workflows and tasks on GitHub. You can write individual tasks, called actions, and combine them to create a custom workflow. Workflows are custom automated processes that you can set up in your repository to build, test, package, release, or deploy any project on GitHub. Issue: Issues are an important tasks or problems to be worked on and may be discussed with others to resolve and close in a GitHub Issue card. Labels: A tag in GitHub that is affixed by an originator or workgroup as a means to identify the task holders for a specific issue. Workgroup leads can filter by labels in the tracker to sort for their specific workgroup or other workgroups’ Kanban cards in the search bar found in the upper right-hand corner of each tracker (below). To use the filter function, use the code “label:labelname” i.e. “label:facilitate” or “label:sim_ui”. (You can use this function with other sort options as well i.e. author:lzim, etc.). In most cases, an issue should only have 1 label at any given time. LucidCharts: Platform that enables the creation of charts and flows. The team uses LucidCharts for pictorial documentation. Markdown (language and file format): Markdown is an incredibly simple semantic file format, not too dissimilar from .doc, .rtf and .txt. Markdown makes it easy for even those without a web-publishing background to write prose (including with links, lists, bullets, etc.) and have it displayed like a website. GitHub supports Markdown and uses a particular form of Markdown called GitHub Flavored Markdown. Master Card: GitHub Master Cards typically do not have an Assignee, Milestone, Estimate, (with the exception of some Manuscript cards for the PI) as their purpose is to document and track all related issue task cards and/or requirements. These cards usually live in their respective Kanban Tracker and/or ZenHub pipeline. Master Document Card: The Master Document Card is a tracking card on GitHub that tracks all of an Issue task’s requirements and multiple Issue task cards related to 1 big Issue that had to be broken down into small tasks. Master Document Cards flows through the document_tracker Kanban and open_documents ZenHub pipeline. Master Feature Card: The Master Feature Card is a tracking card on GitHub that tracks a customer requirement through design to testing. It defines a customer’s requirement, design features that support the requirement and test criteria that demonstrate the design criteria meets the customer requirement. Master Feature Cards flows through the feature_tracker Kanban and open_features ZenHub pipeline. Master Manuscript Card: The Master Manuscript Card is a tracking card on GitHub that tracks all of an Manuscript related Issue task’s requirements and multiple Issue task cards related to 1 big Manuscript Issue that had to be broken down into small tasks. Master Manuscript Cards flows through the manuscript_tracker Kanban and open_manuscripts ZenHub pipeline. Merge: Merging takes the changes from one branch (in the same GitHub repository or from a fork), and applies them into another on GitHub. This often happens as a “pull request” (which can be thought of as a request to merge), or via the command line. A merge can be done through a pull request via the GitHub.com web interface if there are no conflicting changes, or can always be done via the command line. Merge conflict: A difference that occurs between merged branches on GitHub. Merge conflicts happen when people make different changes to the same line of the same file, or when one person edits a file and another person deletes the same file. The merge conflict must be resolved before you can merge the branches. Milestone: Milestones are the monthly workgroup sprints, in which each workgroup tries to accomplish their monthly milestone goals for the monthly epic. Minimum Viable Product (MVP): A new/revised product that attempts to address a user or user groups pain points and needs (See User-Centered Hypotheses). The MVP should follow the 80/20 Pareto Principle (created with the least amount/20% of effort but solves majority/80% of pain points/needs). Persona: A description that is used to represent a user or a user groups’ needs and pain points (see User-Centered Hypotheses) with specific skills, goals, attittudes, and the background of the user to account for while creating and prototyping an MVP. Principles: Rules or beliefs that may be in service of multiple key Values. Project (Kanban Tracker Board): A board that contains issue cards and is used to communicate the status and priority of bugs, features, documentation, &amp; manuscripts as they move through the production process. There are four Kanban to manage production in the Team PSD are: bug_tracker, feature_tracker, document_tracker, and manuscript_tracker. Prototyping: Occurs during Week 2 of the Team PSD 2.0 Monthly Process, prototyping is to build or create a final product or MVP (see Minimum Viable Product) as a way to understand what it should do, how it should be interacted, and see how the product or MVP will look like before completion. The user or user groups’ pain points should be taken into account of while prototyping (see User-Centered Hypotheses). Pull request: Pull requests are proposed changes to a GitHub repository submitted by a user and accepted or rejected by a repository’s collaborators. Like issues, pull requests each have their own discussion forum. Pull request review: Comments from collaborators on a GitHub pull request that approve the changes or request further changes before the pull request is merged. Readme: A GitHub text file containing information about the files in a repository that is typically the first file a visitor to your repository will see. A README file, along with a repository license, contribution guidelines, and a code of conduct, helps you share expectations and manage contributions to your project. Refactoring: Refactoring is needed when we have to make upgrades over time and/or prepare for new, incoming features. Refactoring requires internal changes, without effecting external behavior. Release: GitHub issues that are grouped into a key team release. Repository: A repository is the most basic element of GitHub. They’re easiest to imagine as a project’s folder. A repository contains all of the project files (including documentation), and stores each file’s revision history. Repositories can have multiple collaborators and can be either public or private. Repository (Private): Private GitHub repositories are only visible to the repository owner and collaborators that the owner specified. Retrospective Verbal: A retrospective verbal is a written out set of feedback and response after the user finishes testing and looking through an MVP and thinking about whether or not the MVP addressed their user-centered hypotheses and pain points. Second Story Perspectives: A retrospective look during Week 4 of the Team PSD 2.0 Monthly Spring to discuss what happened in the Epic, the results of the Iteration, review their practices, and identify ways to improve for the next Epic. Task: A cognitive or kinetic behavior that consumes time. A task or group of tasks are necessary to create an outcome or deliverable. Team PSD 2.0 Monthly Process: The 2.0 Monthly Process for Epics/Milestones follows the design thinking process based on concepts from user experience to scale and make Team PSD’s workflow become asynchronous to better support the needs and pain points (See User-Centered Hypotheses) of a user with a product that can also be integrated by the end of the month for the team to use. The Monthly Process goes by weeks. Week 1: Gather user-centered hypotheses Week 2: Clarify user assumptions w/ Minimum Viable Product (MVP) test Week 3: Review results of user persona testing of your MVP Prototype (with concurrent video and retrospective verbal) Week 4: Review user persona artifacts and second story perspectives mindfully and empathically to discover new understandings you might have missed or still need to learn Team PSD Workflows: Team PSD has 3 workflows: Research, Operations, and Modeling to Learn. Think Aloud Protocols: These user testing protocols typically involve participants thinking aloud as they are performing a set of specified tasks. Participants are asked to say whatever comes into their mind as they complete the task. This might include what they are looking at, thinking, doing, and feeling. Team PSD does a combination of a concurrent and retrospective think aloud protocol (see Concurrent Screencast Video and Retrospective Verbal). User Experience: A person’s emotions and attitudes about using a particular product, system/workflow or service. The Team PSD 2.0 Process is based on the foundation of the user’s experience to ensure Products integrated by the end of the monthly Epic address the person’s emotions, attitudes, pain points, and needs. User Testing: Occurs during Week 3 of the Team PSD 2.0 Process, user testing is the process through which the MVP is tested by the targeted users who perform specific and realistic tasks using the MVP. User-Centered Hypotheses: Gathered in Week 1 of the Team PSD 2.0 Process, these are the pain point and needs of a user that is struggling in either a task or parts of the workflow within Team PSD’s Operations, Research, and/or Modeling to Learn pipeline. The pain points and needs should be turned into hypotheses that can be tested and reiterated throughout the Team PSD 2.0 Monthly Process cycle to address and resolve the pain points and needs of a user/user group. Values: Virtues that govern the team’s principles. Values can be in conflict with Principles, especially when it comes to applying Values in any given action. YAML Ain’t Markup Language (YAML or YML): Data serialization language that is used to set configurations for other applications to read and have information about the document/script. YAML will be used by the team to setup App configurations and in our documentation to enable transfers between other documents. GitHub Action workflow files use .YML files. ZenHub: A Google Chrome extension that allows agile project management within GitHub. ZenHub 9 clicks: Every issue card must be in a pipeline, have an assignee, labeled, added dependencies, added to a tracker (if applicable), milestone, epic, estimated with points, in an epic and/or project (if applicable), within a release (if applicable), and associated with pull requests (if necessary). ZenHub Pipelines: Pipelines are columns within the overall ZenHub Board to show where Issues belong in which pipeline, allowing for a clear and consistent flow of Issues across the Board. You can click on the light grey (i) icon within each pipeline to see the description. 18.2 Acronyms AAHRPP: Association for the Accreditation of Human Research Protection Program ACCME: Accreditation Council for Continuing Medical Education ACORP: Animal Component of Research Protocol ADPAC: Automated Data Processing Application Coordinator ANCC: American Nurses Credentialing Center APA: American Psychological Association ASWB: Association of Social Work Boards ATS: Addiction Treatment Services AUD: Alcohol Use Disorder BHIP: Behavioral Health Integration Project BISL: Business Intelligence Service Line CBOC: Community Based Outpatient Clinic CC: Care Coordination CFIR: Consolidated Framework for Implementation Research CHCE: Center for Health Care Evaluation CPRS: Computerized Patient Record System CPT Code: Current Procedural Terminology CRADA: Cooperative Research and Development Agreement CSP: Cooperative Studies Program CTR3: Center for Tissue Regeneration, Rehabilitation, and Repair CWT: Comprehensive Work Therapy DEA: Drug Enforcement Agency DHHS: Department of Health &amp; Human Services EBP: Evidence-Based Practices EBPharm: Evidence-Based Pharmacotherapy EBPsy: Evidence-Based Psychotherapy EES: Employee Education Services F&amp;A Rate: Facilities &amp; Administrative Rate FAR: Federal Acquisition Regulations FTE: Full Time Equivalent GHPC: Georgia Health Policy Center GRECC: Geriatric Research, Education and Clinical Center HERC: Health Economics Resource Center HSR&amp;D: Health Services Research and Development Services IACUC: Institutional Animal Care and Use Committee INAPS: International Association of Peer Supporters IOP: Intensive Outpatient Program IPA: Intergovernmental Personnel Act IRB: Institutional Review Board JPA: Joint Personnel Agreement LD: Livermore Division MAT: Medication Assisted Therapy MHICM: Mental Health Intensive Case Management MHTC: Mental Health Treatment Coordinators MIRECC: Mental Illness Research, Education, and Clinical Center MM: Medication Management MPD: Menlo Park Division NAVREF: National Association of Veteran’s Research and Education Foundations NBCC: National Board for Certified Counselors NCPTSD-DT: National Center for Posttraumatic Stress Disorder, Dissemination &amp; Training NIH: National Institutes of Health OGC: Office of General Counsel OMB: Office of Management &amp; Budget OMHO: Office of Mental Health Operations (now OMHSP) OMHSP: Office of Mental Health &amp; Suicide Prevention (previously OMHO) OPM: Office of Personnel Management ORO: Office of Research Oversight OUD: Opioid Use Disorder PAD: Palo Alto Division PAIRE: Palo Alto Institute for Research and Education, Inc. PAVIR: Palo Alto Veterans Institute for Research PCP: Primary Care PHysician PCT: PTSD Clinical Team PE: Prolonged Exposure PERC: Program Evaluation and Resource Center PHI: Protected Health Information PI: Prinicipal Investigator PSA: Personal Services Agreement PSD: Participatory System Dynamics QI: Quality Improvement QIIC: Quality Improvement Implementation Consultant R&amp;DC: Research and Development Committee RDIS: Research and Development Information System rJPA: Reverse Joint Personnel Agreement SAIL: Strategic Analytics for Improvement and Learning Sankey: A type of flow diagram where the width of the arrows are proportional to the flow quantity “Say File”: GitHub file for the facilitators to read from “See File”: GitHub file for learners to look at at SME: Subject Matter Expert SMI: Serious Mental Illness SRC: Scientific Review Committee SRS: Subcommittee on Research Safety SU: Stanford University SUD: Substance Use Disorder UI: User Interface VA: Veterans Affairs VAPAHCS: Veterans Affairs Palo Alto Health Care System VAPOR: Veterans Advisory Partnership for Operations and Research VERC: Veterans Engineering Resource Center VHA: Veterans Health Administration VISN: Veterans Integrated Service Network VISTA: Veterans Health Information Systems and Technology Architecture WCC: Women’s Counseling Center WRIISC: War Related Illness &amp; Injury Study Center WRVU: Work Relative Value Unit X Waiver: Needed to prescribe buprenorphine; must complete training and still limits # of patients per physician that can receive bup test commit "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
